{"version":3,"sources":["utils/ports.js","utils/misc.js","pacer/constants.js","utils/hexstring.js","pacer/sysex.js","stores/StateStore.js","pages/Home.js","pacer/utils.js","components/DumpSysex.js","pages/Debug.js","components/ControlSelector.js","pacer/model.js","components/DataInputField.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/PresetNameEditor.js","components/PresetSelector.js","components/ActionButtons.js","components/PresetSelectorAndButtons.js","components/UpdateMessages.js","pages/Preset.js","pages/Monitor.js","components/Footer.js","utils/midi.js","components/Midi.js","components/PortsGrid.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","components/PresetOverview.js","pages/Overview.js","components/BusyIndicator.js","components/Download.js","components/DownloadAllPresets.js","pages/Patch.js","components/MidiSupportWarning.js","App.js","serviceWorker.js","index.js"],"names":["portById","id","p","WebMidi","inputs","find","item","outputs","outputById","wait","ms","Promise","r","setTimeout","isVal","v","undefined","dropOverlayStyle","position","top","right","bottom","left","paddingTop","background","textAlign","color","fontSize","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGET_GLOBAL","TARGETS","_TARGETS","Object","defineProperty","TARGET_NAME","PRESET_TARGET","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_2","CONTROL_STOMPSWITCH_3","CONTROL_STOMPSWITCH_4","CONTROL_STOMPSWITCH_5","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_STOMPSWITCH_B","CONTROL_STOMPSWITCH_C","CONTROL_STOMPSWITCH_D","CONTROL_FOOTSWITCH_1","CONTROL_FOOTSWITCH_2","CONTROL_FOOTSWITCH_3","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","map","String","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME","_MSG_TYPES_SHORT_NAME","_MSG_TYPES_FULLNAME","MSG_TYPES_FULLNAME_MIDI_SORTED","obj","arr","prop","hasOwnProperty","push","key","value","sort","a","b","localeCompare","sortObject","_MSG_TYPES_FULLNAME_M","NOT_USED","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","MSG_TYPES_DATA_USAGE","_MSG_TYPES_DATA_USAGE","MSG_TYPES_STOMPSWITCH","MSG_TYPES_FOOTWITCH","MSG_TYPES_EXP_PEDAL","RELAY_MODE_LABEL","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","COLORS_HTML","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","_CONTROL_MODES_SHORT_","padZero","str","len","char","s","c","n","length","h","toString","hs","data","Array","from","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","ALL_PRESETS_EXPECTED_BYTES","SYSEX_START","SYSEX_END","CONTROLS_DATA","CMD","TGT","IDX","OBJ","ELM","isObject","isArray","mergeDeep","target","_len","arguments","sources","_key","source","shift","assign","apply","concat","checksum","bytes","reduce","previousValue","currentValue","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","log","splitDump","stripManufacturer","messages","requestAllPresets","msg","cs","requestPreset","presetIndex","requestPresetObj","controlId","getControlUpdateSysexMessages","forceUpdate","toConsumableArray","mode","control_mode_changed","buildControlModeSysex","msgs","_arr","keys","_i","changed","buildControlStepSysex","_arr2","_i2","led_changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","buildControlStepLedSysex","getMidiSettingUpdateSysexMessages","settings","_arr3","_i3","setting","buildMidiSettingsSysex","StateStore","_this","this","classCallCheck","toggleForceReread","forceReread","sendSysex","sendForReal","midi","output","out","readPacer","bytesExpected","busyMessage","showBusy","busy","bytesReceived","saveBytes","readFullDump","clearBytes","sendDump","asyncToGenerator","regenerator_default","mark","_callee","t","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","wrap","_context","prev","next","abrupt","sendProgress","getBytesPresetsAsBlob","Symbol","iterator","done","Math","round","t0","return","finish","stop","bytesPresets","bytesGlobal","currentPresetIndex","currentControl","updateMessages","input","progress","decBase","extControls","D6InfoVisible","D6InfoHidden","_ref2","_ref2$busy","_ref2$busyMessage","_ref2$bytesExpected","_ref2$bytesReceived","show","_this2","_ref3","_ref3$busyMessage","_ref3$bytesExpected","_ref3$bytesReceived","onBusy","_this3","delay","controlIndex","addControlUpdateMessage","name","charCodeAt","buildPresetNameSysex","stepIndex","preset","dataType","dataIndex","startsWith","settingIndex","P","flatDeep","acc","val","some","sysex","m","bi","isPresetName","isPreset","isGlobal","presetNum","files","all","_ref4","_callee2","file","_context2","size","_this4","hideBusy","Response","arrayBuffer","t1","sent","storeBytes","_x2","_this5","getOwnPropertyNames","forEach","presetId","ctrlType","ctrl","readPreset","decorate","observable","connected","computed","state","Home","react_default","createElement","className","href","rel","src","alt","Component","presetIndexToXY","ii","floor","MidiTable","_ref","colSpan","Note","MidiSettings","DumpSysex_MidiTable","ControlTable","c0","c1","Controls","controls","DumpSysex_ControlTable","Preset","_ref5","DumpSysex_Controls","DumpSysex_MidiSettings","DumpSysex","props","DumpSysex_Preset","inject","observer","replacerDec2Hex","toSysExMessage","Debug","customMessage","_ref$busyMessage","_ref$bytesExpected","_ref$bytesReceived","updateCustomMessage","event","toUpperCase","match","setState","getCustomMessageData","sendCustomMessage","sendMessage","_this$state","hex_msg","JSON","stringify","onClick","disabled","type","placeholder","onChange","src_components_DumpSysex","Control","selected","onSelect","ControlSelector","selectControl","ControlSelector_Control","getAvailableMessageTypes","DataInputField","msgType","LEDMidi","current_value","LEDColor","colorIndex","LEDNum","Step","d0","d1","d2","updateData","updateControlStep","updateLED","led","react","updateControlStepMessageType","mtype","DataInputField_DataInputField","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","ControlModeEditor","onUpdate","PresetNameEditor","onNameUpdate","updatePresetName","Selector","xyId","hasData","PresetSelector","selectPreset","showD6Info","_this$props$state","currName","xselected","checked","letter","digit","xy","ActionButtons","_super","call","onInputFile","inputOpenFileRef","current","click","onChangeFile","readFiles","clearData","clear","React","createRef","canRead","canWrite","title","updatePacer","ref","style","display","PresetSelectorAndButtons","src_components_PresetSelector","components_ActionButtons","hideD6Info","UpdateMessages","j","updateMessage","setAutoFreeze","onDragEnter","dropZoneActive","onDragLeave","onDrop","updateControlMode","setControlMode","copyPresetFrom","presetIdFrom","presetIdTo","showEditor","presetLabel","es","disableClick","components_PresetNameEditor","src_components_ControlSelector","src_components_ControlModeEditor","src_components_ControlStepsEditor","components_UpdateMessages","Monitor","Footer","batchMessages","callback","callbackBusy","timeout","clearTimeout","Midi","handleMidiInputEvent","err","connectInput","port","hasListener","addListener","disconnectInput","removeListener","connectOutput","disconnectOutput","autoConnectInput","autoConnect","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","RegExp","autoConnectOutput","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","registerInputs","filter","only","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","selectInputPort","selectOutputPort","midiOn","PortsGrid","groupedPorts","clickHandler","react_switch_default","height","width","DumpDecoder","produce","draft","esm_asyncToGenerator","runtime_regenerator_default","src_components_Midi","portsRenderer","components_PortsGrid","messageType","onMidiInputEvent","MidiNote","note","Setting","updateMidiSettings","MidiSettingsEditor_MidiNote","MidiSettingsEditor","PresetMidi","src_components_MidiSettingsEditor","Message","hexDisplay","constructor","used","colorOn","colorOff","displayColor","MessageSummary","backgroundColor","withRouter","history","control","_ref3$stompswitch","stompswitch","n_active_steps","PresetOverview_Step","PresetOverview_Control","MidiSetting","_ref6","PresetTitle","_ref7","presetName","_ref8","PresetOverview_Controls","hasMidiConfig","PresetOverview_MidiSettings","Presets","_ref9","PresetOverview_Preset","PresetOverview","_ref10","Overview","components_PresetOverview","BusyIndicator","Download","handleClick","url","window","URL","createObjectURL","Blob","filename","addTimestamp","now","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","shadowlink","document","download","body","appendChild","removeChild","revokeObjectURL","label","DownloadAllPresets","isBytesPresetEmpty","components_Download","Patch","status","components_DownloadAllPresets","components_BusyIndicator","severity","MidiSupportWarning","_Component","inherits","MidiSupportWarning_createSuper","args","supported","createClass","navigator","requestMIDIAccess","MenuLink","to","activeOnlyWhenExact","Route","path","exact","children","Link","NoMatch","App","q","QueryString","location","search","debug","mobxreact_esm","globalState","HashRouter","MidiSupportWarning_MidiSupportWarning","App_MenuLink","process","Switch","render","src_pages_Overview","src_pages_Preset","pages_PresetMidi","src_pages_Patch","src_pages_Monitor","src_pages_DumpDecoder","src_pages_Debug","src_pages_Home","component","src_components_Footer","Boolean","hostname","noop","error","ReactDOM","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fb58c24.chunk.js","sourcesContent":["import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","\nexport const MAX_FILE_SIZE = 200 * 1024;\n\n// export const MAX_STATUS_MESSAGES = 40;\n\nexport const wait = ms => new Promise(r => setTimeout(r, ms));\n\nexport function isVal(v) {\n    return v !== undefined && v !== null && v !== '' && v >= 0;\n}\n\nexport function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\n// Array.isArray() does not work with typed arrays; replaced with typeof === 'object'\n//\nexport function flatDeep(arr, d = 1) {\n    // console.log(\"flatDeep\", d);\n    return d > 0 ?\n               arr.reduce(\n                   (acc, val) => acc.concat(typeof val === 'object' ? flatDeep(val, d - 1) : val), []\n               ) :\n           arr.slice();\n}\n\nexport const dropOverlayStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    paddingTop: '4rem',\n    background: 'rgba(0,0,0,0.4)',\n    textAlign: 'center',\n    color: '#fff',\n    fontSize: '4rem'\n};\n","import {sortObject} from \"../utils/misc\";\n\nexport const ANY_MIDI_PORT = \".*\";\n\n// export const PACER_MIDI_PORT_NAME = \"vmpk.*\";            // DEBUG\n// export const PACER_MIDI_INPUT_PORT_NAME = \"vmpk.*\";      // DEBUG\n// export const PACER_MIDI_OUTPUT_PORT_NAME = \"vmpk.*\";     // DEBUG\nexport const PACER_MIDI_PORT_NAME = \"Pacer.*\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer.*\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer.*\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const TARGET_NAME = [\n    \"switch 1\",     // 1\n    \"switch 2\",     // 2\n    \"switch 3\",     // 3\n    \"switch 4\",     // 4\n    \"switch 5\",     // 5\n    \"switch 6\",     // 6\n    null,           // 7\n    \"switch A\",     // 8\n    \"switch B\",     // 9\n    \"switch C\",     // 10    A\n    \"switch D\",     // 11    B\n    \"FS 1\",         // 12    C\n    \"FS 2\",         // 13    D\n    \"FS 3\",         // 14    E\n    \"FS 4\",         // 15    F\n    \"EXP 1\",        // 16   10\n    \"EXP 2\"         // 17   11\n];\n/*\nexport const TARGET_NAME = [\n    null,           // 0\n    \"switch 1\",     // 1\n    \"switch 2\",     // 2\n    \"switch 3\",     // 3\n    \"switch 4\",     // 4\n    \"switch 5\",     // 5\n    \"switch 6\",     // 6\n    null,           // 7\n    \"switch A\",     // 8\n    \"switch B\",     // 9\n    \"switch C\",     // 10    A\n    \"switch D\",     // 11    B\n    \"FS 1\",         // 12    C\n    \"FS 2\",         // 13    D\n    \"FS 3\",         // 14    E\n    \"FS 4\",         // 15    F\n    \"EXP 1\",        // 16   10\n    \"EXP 2\"         // 17   11\n];\n*/\n\n/*\nexport const TARGET_NAME_LONG = [\n    \"\",\n    \"SW-1\",\n    \"SW-2\",\n    \"SW-3\",\n    \"SW-4\",\n    \"SW-5\",\n    \"SW-6\",\n    \"\",\n    \"SW-A\",\n    \"SW-B\",\n    \"SW-C\",\n    \"SW-D\",\n    \"Footswitch 1\",\n    \"Footswitch 2\",\n    \"Footswitch 3\",\n    \"Footswitch 4\",\n    \"Expression Pedal 1\",\n    \"Expression Pedal 2\"\n];\n*/\n\nexport const PRESET_TARGET = [\n    \"Current\",      // 0x01\n    \"Track\",        // 0x02\n    \"Transport\",    // 0x03\n    \"A1\", // 0x04\n    \"A2\", // 0x05\n    \"A3\", // 0x06\n    \"A4\", // 0x07\n    \"A5\", // 0x08\n    \"A6\", // 0x09\n    \"B1\", // 0x0A\n    \"B2\", // 0x0B\n    \"B3\", // 0x0C\n    \"B4\", // 0x0D\n    \"B5\", // 0x0E\n    \"B6\", // 0x0F\n    \"C1\", // 0x10\n    \"C2\", // 0x11\n    \"C3\", // 0x12\n    \"C4\", // 0x13\n    \"C5\", // 0x14\n    \"C6\", // 0x15\n    \"D1\", // 0x16\n    \"D2\", // 0x17\n    \"D3\", // 0x18\n    \"D4\", // 0x19\n    \"D5\", // 0x1A\n    \"D6\"    // 0x1B\n]\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {      //FIXME: use constants for the key, like CONTROLS above\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch 2\",\n    0x1A: \"Footswitch 3\",\n    0x1B: \"Footswitch 4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n//FIXME: add FS when ready\nexport const CONTROLS_WITH_SEQUENCE = [\n    0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17  //, 0x18, 0x19, 0x1A, 0x1B\n];\n\n// subsets of CONTROLS keys:        // we convert to string because this ID will be used as object property (keys)\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17].map(String);\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17].map(String);\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12].map(String);\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B].map(String);\nexport const EXPPEDALS = [0x36, 0x37].map(String);\n\n// message types EXP PEDALS:\nexport const MSG_AD_MIDI_CC = 0x00;\nexport const MSG_AD_NRPN_COARSE = 0x03;\nexport const MSG_AD_NRPN_FINE = 0x04;\nexport const MSG_AD_PITCH_BEND = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\n// message types STOMPSWITCHES and FOOTSWITCHES:\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\n// message types ENCODER:\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPN_COARSE = 0x15;\nexport const MSG_ENC_NRPN_FINE = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESET_SELECT = 0x17;\nexport const MSG_ENC_STEP_SELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN C\",\n    [MSG_AD_NRPN_FINE]: \"NRPN F\",\n    [MSG_AD_PITCH_BEND]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN C\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESET_SELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEP_SELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\nexport const MSG_TYPES_SHORT_NAMES = {      // used in overview\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN C\",\n    [MSG_AD_NRPN_FINE]: \"NRPN F\",\n    [MSG_AD_PITCH_BEND]: \"Pitch\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW\",\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC tggl\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note tggl\",\n    [MSG_SW_PRG_BANK]: \"Prg bank\",\n    [MSG_SW_PRG_STEP]: \"Prg step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN C\",\n    [MSG_SW_NRPN_FINE]: \"NRPN F\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"Relay\",\n    [MSG_SW_PRESET_SELECT]: \"Preset sel\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset +/-\",\n    [MSG_SW_STEP_SELECT]: \"Step sel\",\n    [MSG_SW_STEP_INC_DEC]: \"Step +/-\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC rel\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN C\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"Pitch\",\n    [MSG_ENC_ATCHAN]: \"AT chan\",\n    [MSG_ENC_PROGRAM]: \"Prg\",\n    [MSG_ENC_PRESET_SELECT]: \"Preset sel\",\n    [MSG_ENC_STEP_SELECT]: \"Step sel\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME = {\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_AD_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_AD_PITCH_BEND]: \"Pitch Bend\",\n    [MSG_AD_ATCHAN]: \"Channel AfterTouch\",\n    [MSG_DAWFUNC]: \"DAW Function\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESET_SELECT]: \"Preset Sel\",\n    [MSG_ENC_STEP_SELECT]: \"Step Sel\"\n};\n\n// export const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME);\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const NOT_USED = \"not used\";\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    // each value must be a array of 3 values\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_AD_MIDI_CC]: [\"Controller\", \"Min\", \"Max\"],\n    [MSG_AD_NRPN_COARSE]: [\"Max\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_AD_NRPN_FINE]: [\"Max\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_AD_PITCH_BEND]: [NOT_USED, \"Min\", \"Max\"],\n    [MSG_AD_ATCHAN]: [NOT_USED, \"Min\", \"Max\"],\n    [MSG_DAWFUNC]: [\"function\", NOT_USED, NOT_USED],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [NOT_USED, \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", NOT_USED],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", NOT_USED],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", NOT_USED, NOT_USED],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", NOT_USED, NOT_USED],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", NOT_USED],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", NOT_USED],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPN_COARSE]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPN_FINE]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESET_SELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEP_SELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", NOT_USED]\n};\n\nexport const MSG_TYPES_DATA_USAGE = {\n\n    // each value must be a array of 3 values\n\n    [MSG_AD_MIDI_CC]: [true, true, true],\n    [MSG_AD_NRPN_COARSE]: [true, true, true],\n    [MSG_AD_NRPN_FINE]: [true, true, true],\n    [MSG_AD_PITCH_BEND]: [true, true, true],\n    [MSG_AD_ATCHAN]: [true, true, true],\n    [MSG_DAWFUNC]: [true, false, false],\n    [MSG_CTRL_OFF]: [true, true, true],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [true, true, true],\n    [MSG_SW_MIDI_CC]: [true, true, true],\n    [MSG_SW_MIDI_CC_STEP]: [true, true, true],\n    [MSG_SW_NOTE]: [true, true, false],\n    [MSG_SW_NOTE_TGGLE]: [true, true, false],\n    [MSG_SW_PRG_BANK]: [true, true, true],\n    [MSG_SW_PRG_STEP]: [false, true, true],\n    [MSG_SW_NRPN_COARSE]: [true, true, true],\n    [MSG_SW_NRPN_FINE]: [true, true, true],\n    [MSG_SW_MMC]: [true, true, false],\n    [MSG_SW_RELAY]: [true, true, false],\n    [MSG_SW_PRESET_SELECT]: [true, false, false],\n    [MSG_SW_PRESET_INC_DEC]: [true, false, false],\n    [MSG_SW_STEP_SELECT]: [true, true, false],\n    [MSG_SW_STEP_INC_DEC]: [true, true, false],\n\n    [MSG_ENC_CC]: [true, true, true],\n    [MSG_ENC_MIDICC_REL]: [true, true, true],\n    [MSG_ENC_NRPN_COARSE]: [true, true, true],\n    [MSG_ENC_NRPN_FINE]: [true, true, true],\n    [MSG_ENC_PITCH]: [true, true, true],\n    [MSG_ENC_ATCHAN]: [true, true, true],\n    [MSG_ENC_PROGRAM]: [true, true, true],\n    [MSG_ENC_PRESET_SELECT]: [true, true, true],\n    [MSG_ENC_STEP_SELECT]: [true, true, true],\n\n    [MSG_LOAD_CC]: [true, true, false]\n};\n\n\n\n// MSG_DAWFUNC,\n//     MSG_ENC_CC,\n// MSG_ENC_MIDICC_REL,\n// MSG_ENC_NRPNC,\n// MSG_ENC_NRPNF,\n// MSG_ENC_PITCH,\n// MSG_ENC_ATCHAN,\n// MSG_ENC_PROGRAM,\n// MSG_ENC_PRESETSELECT,\n// MSG_ENC_STEPSELECT,\n//\n// MSG_LOAD_CC,\n\n\nexport const MSG_TYPES_STOMPSWITCH = [\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_MMC,\n    MSG_SW_RELAY,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_STEP_SELECT,\n    MSG_SW_STEP_INC_DEC,\n    MSG_CTRL_OFF\n];\n\nexport const MSG_TYPES_FOOTWITCH = [\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_MMC,\n    MSG_SW_RELAY,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_STEP_SELECT,\n    MSG_SW_STEP_INC_DEC,\n    MSG_CTRL_OFF\n];\n\nexport const MSG_TYPES_EXP_PEDAL = [\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_AD_ATCHAN,\n    MSG_CTRL_OFF\n];\n\nexport const RELAY_MODE_LABEL = [\n    \"Auto Detect\",\n    \"Normally Open\",\n    \"Normally Closed\",\n    \"Latching\"\n];\n\nexport const RELAY_MODE_LABEL_SHORT = [\n    \"Auto\",\n    \"N. Open\",\n    \"N. Closed\",\n    \"Latching\"\n];\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\n\nexport const COLORS_HTML = {        // https://en.wikipedia.org/wiki/Web_colors\n    0x00 : \"#000000\",\n    0x01 : \"#FFC0CB\",\n    0x02 : \"rgba(255, 192, 203, 0.5)\", // 50% transparent\n    0x03 : \"#FF0000\",\n    0x04 : \"rgba(255, 0, 0, 0.5)\",\n    0x05 : \"#FF8C00\",\n    0x06 : \"rgba(255, 140, 0, 0.5)\",\n    0x07 : \"#FFBF00\",                // https://simple.wikipedia.org/wiki/Amber_(color)\n    0x08 : \"rgba(255, 191, 0, 0.5)\",\n    0x09 : \"#FFFF00\",\n    0x0A : \"rgba(255, 255, 0, 0.5)\",\n    0x0B : \"#00FF00\",\n    0x0C : \"rgba(0, 255, 0, 0.5)\",\n    0x0D : \"#008000\",\n    0x0E : \"rgba(0, 128, 0, 0.5)\",\n    0x0F : \"#008080\",\n    0x10 : \"rgba(0, 128, 128, 0.5)\",\n    0x11 : \"#0000FF\",\n    0x12 : \"rgba(0, 0, 255, 0.5)\",\n    0x13 : \"#E6E6FA\",                // https://en.wikipedia.org/wiki/Lavender_(color)\n    0x14 : \"rgba(230, 230, 250, 0.5)\",\n    0x15 : \"#800080\",\n    0x16 : \"rgba(128, 0, 128, 0.5)\",\n    0x17 : \"#FFFFFF\",\n    0x18 : \"#FFFFFF\"\n};\n\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\n// export const CONTROL_MODE_EXT_STEP = 0x01;\n// export const CONTROL_MODE_SEQUENCE = 0x02;\nexport const CONTROL_MODE_EXT_STEP = 0x02;\nexport const CONTROL_MODE_SEQUENCE = 0x01;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All steps in one shot\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n\nexport const CONTROL_MODES_SHORT_NAME = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"ESS\",\n    [CONTROL_MODE_SEQUENCE]: \"Seq\",\n};\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    // return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n\nexport const toHexDump = function(data, width = 16) {\n    let s = [];\n    if (!data || data.length < 1) return s;\n    let i = 0;\n    do {\n        s.push(`${padZero(i.toString(width), 8)}: ${hs(data.slice(i, i+width))}`);\n        i+= width;\n    } while (i < data.length);\n    return s;\n}\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER, TARGET_GLOBAL,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SINGLE_PRESET_EXPECTED_BYTES = 189;    // FIXME: unit is not bytes but messages\nexport const ALL_PRESETS_EXPECTED_BYTES = 4536;     // FIXME: unit is not bytes but messages\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// data structure keys:\nexport const CONTROLS_DATA = \"controls\";\nexport const STEPS_DATA = \"steps\";\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return (128 - (sum % 128)) % 128;\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n// sysex contains START and END markers\nfunction getBytesIndex(sysex) {\n    // if ((data[0] !== SYSEX_START) || (data[data.byteLength - 1] !== SYSEX_END)) return null;\n\n    // 00 01 77 7f 01 01 13 01 01 05 47 2d 4d 53 54 7c\n\n    // console.log(\"getBytesIndex\", hs(data));\n    return {\n        isPresetName: sysex[TGT+1] === TARGET_PRESET && sysex[OBJ+1] === 1,\n        isPreset: sysex[TGT+1] === TARGET_PRESET,\n        isGlobal: sysex[TGT+1] === TARGET_GLOBAL,\n        presetNum: sysex[IDX+1]\n    }\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[2]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\nfunction getMidiSetting(data) {\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    //TODO: verify checksum\n\n    // console.log(\"parseSysexMessage\", data, JSON.stringify(data));\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    // console.log(\"parseSysexMessage cmd, tgt, idx, obj\", cmd, tgt, idx, obj, hs(data));\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        // console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {   //NOTE: idx is transformed in string here (Property names must be strings, https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        // bytes: data      // FIXME: consolidate data per preset\n    };\n\n    if (data.length === 7) return message;\n\n    if (!(obj in CONTROLS)) {\n        // console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else if (obj === CONTROL_ALL) {\n        obj_type = \"all\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // if (data.length === 8) return message;\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][CONTROLS_DATA] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        if (data.length > 9) {\n\n            // which element?\n            let e = data[ELM];\n\n            if (e >= 0x01 && e <= 0x24) {\n\n                // STEPS\n                if (data.length > ELM + 22) {\n                    let s = getControlStep(data.slice(ELM, ELM + 23));\n                    message[tgt][idx][CONTROLS_DATA][obj][\"steps\"][s.index] = s.config;\n                } else {\n                    console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n                }\n\n            } else if (e === CONTROL_MODE_ELEMENT) {\n\n                // CONTROL MODE\n                // console.log('parseSysexMessage: CONTROL MODE', idx, obj, ELM, data.slice(ELM, data.length - 1), data);\n\n                let mode_cfg = getControlMode(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], mode_cfg);\n\n            } else if (e >= 0x40 && e <= 0x57) {\n\n                // LED\n                // console.log('parseSysexMessage: LED');\n\n                let led_cfg = getControlLED(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], led_cfg);\n\n            } else if (e === 0x7F) {\n\n                // ALL\n                // console.log('parseSysexMessage: ALL');\n\n            } else {\n                console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n                return null;\n            }\n        } else {\n\n            message[tgt][idx][CONTROLS_DATA] = {\n                [obj]: {}\n            };\n\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n\n    if (obj_type === \"all\") {\n\n        message[tgt][idx][\"all\"] = {};\n\n        // // which element?\n        // let e = data[ELM];\n        //\n        // if (e >= 0x01 && e <= 0x60) {\n        //\n        //     // SETTINGS\n        //     if (data.length > ELM+19) {\n        //         let s = getMidiSetting(data.slice(ELM, ELM + 20));\n        //         message[tgt][idx][\"midi\"][s.index] = s.config;\n        //     } else {\n        //         console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n        //     }\n        //\n        // } else {\n        //     console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n        //     return null;\n        // }\n\n    }\n\n    // console.log(JSON.stringify(message));\n\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // console.log(\"parseSysexDump\", config);\n\n\n        // const p = parseMessage(data.slice(i, k));\n        // console.log(\"parsed\", p);\n\n        if (config) {\n            mergeDeep(presets, config);\n\n            // const tgt = parseInt(Object.keys(config)[0], 10);\n            // const idx = parseInt(Object.keys(config[tgt])[0], 10);\n            // console.log(\"parseSysexDump\", tgt, idx);\n            // if (tgt === TARGET_PRESET) {\n            //     this.bytesPresets[`${idx}`].push(data.slice(i, k));\n            // } else if (tgt === TARGET_GLOBAL) {\n            //     this.bytesGlobal.push(data.slice(i, k));\n            // }\n            // console.log(\"bytesPresets\", this.bytesPresets);\n\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Split a dump into individual sysex messages\n * @param data\n * @param stripManufacturer\n * returns a array of sysex messages. The messages do not contains the sysex \"start of sysex\" 0xF0 and \"end of sysex\" 0xF7 bytes.\n */\nfunction splitDump(data, stripManufacturer) {\n\n    if (data === null) return [];\n\n    let messages = [];\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: dump does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        messages.push(data.slice(i+3, k));  // data.slice(i, k) are the data between MANUFACTURER and SYSEX_END\n\n    } // while\n\n    return messages;\n}\n\n\n/**\n * Split a sysex dump into individual presets\n *\n * input: binay data\n * output: collection (key-value obj) of binary data\n */\n/*\nfunction splitDump(data) {\n\n    if (data === null) return {};\n\n    let presets = [];   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return {};\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return {};\n        }\n\n        let d = data.slice(i, k);\n\n        // let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // if (config) {\n        //     mergeDeep(presets, config);\n        // }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n*/\n\n\n/**\n *\n */\nexport function requestAllPresets() {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n * ONLY FOR DEBUG\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n/*\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n*/\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // msgs.map(m => console.log(\"buildControlStepSysex\", hs(m)));\n\n    return msgs;\n}\n\nfunction buildControlStepLedSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.led_changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        // msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        // msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        // msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        // msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        // msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        // msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        // msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n/**\n *\n * @param presetIndex\n * @param controlId\n * @param mode\n * @returns {number[]}\n */\nfunction buildControlModeSysex(presetIndex, controlId, mode, forceUpdate = false) {\n\n    if (!forceUpdate && !mode.control_mode_changed) return [];   // order important because \"control_mode_change\" could be undefined\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode[\"control_mode\"]\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return the result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n/**\n * Wihtout Control Mode config\n * Without LED config\n *\n * @param presetIndex\n * @param controlId\n * @param data\n * @param forceUpdate\n * @returns {*}\n */\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data, forceUpdate = false) {\n    return [\n        ...buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId], forceUpdate)  ,\n        ...buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate),\n        ...buildControlStepLedSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate)\n    ];\n}\n\nfunction buildMidiSettingsSysex(presetIndex, settings, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed && !forceUpdate) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    getBytesIndex,\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex,\n    splitDump\n};\n\n","import {computed, decorate, observable} from \"mobx\";\nimport {outputById} from \"../utils/ports\";\nimport {MSG_CTRL_OFF, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    buildPresetNameSysex,\n    CONTROLS_DATA, getBytesIndex, getControlUpdateSysexMessages, getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets,\n    requestPreset,\n    SINGLE_PRESET_EXPECTED_BYTES, splitDump, SYSEX_END, SYSEX_START\n} from \"../pacer/sysex\";\nimport {flatDeep, MAX_FILE_SIZE, wait} from \"../utils/misc\";\nimport {hs} from \"../utils/hexstring\";\n\nclass StateStore {\n\n    constructor() {\n\n        // {\n        //     \"1\":{                            // TARGET_PRESET\n        //         \"0\":{                        // CURRENT preset\n        //             \"name\":\"NOTES\",\n        //             \"controls\":{...},\n        //             \"midi\":{...}\n        //         },\n        //         \"1\":{                        // A1\n        //             \"name\":\"PRGM1\",\n        //             \"controls\":{...},\n        //             \"midi\":{...}\n        //         },\n        //         ...\n        //     },\n        //     \"5\":{                            // TARGET_GLOBAL\n        //         ...\n        //     }\n        // }\n\n        this.data = null;\n\n        this.bytesPresets = [[], [], [],    // current, track, transport\n                             [], [], [], [], [], [],    // A1..A6\n                             [], [], [], [], [], [],    // B1..B6\n                             [], [], [], [], [], [],    // C1..C6\n                             [], [], [], [], [], []]    // D1..D6\n        this.bytesGlobal = [];\n\n        this.sendProgress = null;\n\n        this.currentPresetIndex = \"\";    // must be a string because it is used as a property name (object key) (https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        this.currentControl = \"\";   // must be a string because it is used as a property name (object key) (https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        this.updateMessages = {};\n        this.midi = {\n            inputs: [],         // array of MIDI inputs (filtered from WebMidi object)\n            outputs: [],        // array of MIDI outputs (filtered from WebMidi object)\n            input: 0,        // MIDI output port enabled\n            output: 0        // MIDI output port enabled,\n        };\n        // this.pacerPresent = false;\n        this.busy = false;\n        this.busyMessage = \"Receiving data, please wait...\";\n        this.bytesExpected = -1;\n        this.progress = -1;    // 0..100\n        //TODO:\n        this.decBase = true;  // true --> decimal base, false --> hex base for number\n        this.extControls = true;\n        this.forceReread = false;\n        this.changed = false;\n        this.D6InfoVisible = false;\n        this.D6InfoHidden = false;\n    }\n\n    //TODO:\n    // bytes:\n    // bytesPresets = [preset-index][]\n    // bytesGlobals = []\n\n    // pacerConnected() {\n    //     return this.midi.output > 0 && this.midi.input > 0;\n    // }\n\n    get connected() {\n        // console.log(\"get connected\", this.midi.input, this.midi.output);\n        return this.midi.output !== 0 && this.midi.input !== 0;\n    }\n\n    clearBytes() {\n        this.bytesPresets = [[], [], [],    // current, track, transport\n            [], [], [], [], [], [],    // A1..A6\n            [], [], [], [], [], [],    // B1..B6\n            [], [], [], [], [], [],    // C1..C6\n            [], [], [], [], [], []]    // D1..D6\n        this.bytesGlobal = [];\n    }\n\n    clear() {\n        console.log(\"state: clear data\");\n        this.data = null;\n        this.clearBytes();\n        this.updateMessages = {};\n    }\n\n    showD6Info() {\n        // if hidden, keep it hidden\n        if (!this.D6InfoHidden) this.D6InfoVisible = true;\n        console.log(\"showD6Info()\", this.D6InfoVisible);\n    }\n\n    hideD6Info() {\n        this.D6InfoVisible = false;\n        this.D6InfoHidden = true;\n    }\n\n    toggleForceReread = () => {\n        this.forceReread = !this.forceReread;\n    }\n\n    onBusy({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) {\n\n        // console.log(\"StateStore.onBusy\", busy, busyMessage, bytesExpected, bytesReceived);\n\n        let show = busy !== this.busy;\n        show = show || (busyMessage !== null && busyMessage !== this.busyMessage);\n        show = show || (bytesExpected > 0 && bytesExpected !== this.bytesExpected);\n\n        let progress = -1;\n        if (this.bytesExpected > 0 && bytesReceived > 0) {\n            progress = Math.round(bytesReceived / this.bytesExpected * 100 / 5) * 5;\n            show = show || ((progress >= 0) && (progress !== this.progress));\n        }\n\n        if (show) {\n            if (this.busy !== busy) this.busy = busy;\n            if (busyMessage !== null) this.busyMessage = busyMessage;\n            if (bytesExpected > 0 && bytesExpected !== this.bytesExpected) this.bytesExpected = bytesExpected;\n            if (busy === false) {\n                this.bytesExpected = -1;\n                this.progress = -1;\n            } else {\n                if (bytesExpected > 0) this.bytesExpected = bytesExpected;\n                if (this.progress !== progress) {\n                    this.progress = progress;\n                }\n            }\n        }\n    };\n\n    showBusy({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) {\n        setTimeout(() => this.onBusy({busy: false}), 20000);\n        this.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    }\n\n    hideBusy(delay = 0) {\n        if (delay < 1) {\n            this.onBusy({busy: false});\n            // this.sendProgress = null;\n        } else {\n            setTimeout(() => this.onBusy({busy: false}), delay);\n        }\n    }\n\n    selectPreset(presetIndex) { // String\n        // console.log(\"selectPreset\", presetIndex, typeof presetIndex);\n        this.currentPresetIndex = presetIndex;\n    }\n\n    selectControl(controlIndex) {\n        // console.log(\"selectControl\", controlIndex, typeof controlIndex);\n        this.currentControl = controlIndex;\n    }\n\n    /**\n     * Update the control mode of the currentControl of the currentPresetIndex\n     * @param value\n     */\n    setControlMode(value) {\n        this.data[TARGET_PRESET][this.currentPresetIndex][CONTROLS_DATA][this.currentControl][\"control_mode\"] = value;\n        this.data[TARGET_PRESET][this.currentPresetIndex][CONTROLS_DATA][this.currentControl][\"control_mode_changed\"] = true;\n        this.addControlUpdateMessage(this.currentControl, getControlUpdateSysexMessages(this.currentPresetIndex, this.currentControl, this.data));\n        this.changed = true;\n    }\n\n    addControlUpdateMessage(controlId, msg) {\n        if (!this.updateMessages.hasOwnProperty(this.currentPresetIndex)) {\n            this.updateMessages[this.currentPresetIndex] = {};\n        }\n        if (!this.updateMessages[this.currentPresetIndex].hasOwnProperty(CONTROLS_DATA)) {\n            this.updateMessages[this.currentPresetIndex][CONTROLS_DATA] = {};\n        }\n        this.updateMessages[this.currentPresetIndex][CONTROLS_DATA][controlId] = msg;\n    }\n\n    updatePresetName(presetIndex, name) {\n\n        if (name === undefined || name === null) return;\n\n        if (name.length > 5) {\n            console.warn(`Presets.updateName: name too long: ${name}`);\n            return;    // Calling .setState with null no longer triggers an update in React 16.\n        }\n\n        this.data[TARGET_PRESET][presetIndex][\"name\"] = name;\n        this.data[TARGET_PRESET][presetIndex][\"changed\"] = true;     //TODO: used?\n\n\n        if (!this.updateMessages.hasOwnProperty(presetIndex)) this.updateMessages[presetIndex] = {};\n        if (!this.updateMessages[presetIndex].hasOwnProperty(\"name\")) this.updateMessages[presetIndex][\"name\"] = {};\n\n        this.updateMessages[presetIndex][\"name\"][\"dummy\"] = buildPresetNameSysex(presetIndex, this.data);\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStepMessageType(controlId, stepIndex, value, preset = this.currentPresetIndex) {\n\n        // console.log(`updateControlStep(${controlId}, ${stepIndex}, ${dataType}, ${dataIndex}, ${value})`);\n\n        let v = parseInt(value, 10);\n\n        this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"msg_type\"] = v;\n\n        if (v === MSG_CTRL_OFF) {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n        }\n\n        this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n\n        this.addControlUpdateMessage(controlId, getControlUpdateSysexMessages(preset, controlId, this.data));\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep(controlId, stepIndex, dataType, dataIndex, value, preset = this.currentPresetIndex) {\n\n        console.log(`updateControlStep(${controlId}, ${stepIndex}, ${dataType}, ${dataIndex}, ${value})`);\n\n        let v = parseInt(value, 10);\n\n        // const data = this.props.state.data;\n        // const presetIndex = this.props.state.currentPreset;\n        // const updateMessages = this.props.state.updateMessages;\n\n        if (dataType === \"data\") {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][dataType] = v;\n        }\n\n        // if (dataType === \"msg_type\") {\n        //     if (v === MSG_CTRL_OFF) {\n        //         this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n        //     } else {\n        //         this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n        //     }\n        // }\n\n        if (dataType.startsWith(\"led_\")) {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"led_changed\"] = true;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n        }\n\n        this.addControlUpdateMessage(controlId, getControlUpdateSysexMessages(preset, controlId, this.data));\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings(settingIndex, dataType, dataIndex, value) {\n\n        let v = parseInt(value, 10);\n\n        const P = this.currentPresetIndex;\n\n        // console.log(\"updateMidiSettings\", settingIndex, dataType, dataIndex, value, v, P);\n\n        // this.setState(\n        //     produce(draft => {\n                if (dataType === \"data\") {\n                    this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    this.data[TARGET_PRESET][P][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"changed\"] = true;\n\n                this.changed = true;\n\n                if (!this.updateMessages.hasOwnProperty(P)) this.updateMessages[P] = {};\n                if (!this.updateMessages[P].hasOwnProperty(\"midi\")) this.updateMessages[P][\"midi\"] = {};\n\n                //FIXME: update the methods that read updateMessages to allow object or array\n                this.updateMessages[P][\"midi\"][\"dummy\"] = getMidiSettingUpdateSysexMessages(P, this.data);\n\n            // })\n        // );\n    }\n\n    sendSysex = (msg, sendForReal = true) => {\n        if (!this.midi.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.midi.output);\n        if (!out) {\n            console.warn(`send: output ${this.midi.output} not found`);\n            return;\n        }\n        // console.log(\"sendSysex\", msg, hs(msg));\n        if (sendForReal) out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n/*\n    sendAny = msg => {\n        if (!this.midi.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.midi.output);\n        if (!out) {\n            console.warn(`send: output ${this.midi.output} not found`);\n            return;\n        }\n        console.log(\"sendAny\", msg);\n        out.send(msg);\n    };\n*/\n\n    readPacer = (msg, bytesExpected, busyMessage = \"Please wait...\") => {\n        this.showBusy({busy: true, busyMessage: busyMessage, bytesReceived: 0, bytesExpected});\n        this.saveBytes = false;\n        this.sendSysex(msg);\n    };\n\n    readPreset(index) {\n        // if (midiConnected(this.state.output) && isVal(index)) {\n        if (this.midi.output && this.midi.input) {\n            this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n        }\n    }\n\n    /**\n     * Request a full dump and save the data in state.bytes\n     * @param busyMessage\n     */\n    readFullDump = (busyMessage = \"Please wait...\") => {\n        // console.log(\"readFullDump()\");\n        this.showBusy({busy: true, busyMessage: busyMessage, bytesReceived: 0, bytesExpected: ALL_PRESETS_EXPECTED_BYTES});\n        this.clearBytes();\n        this.sendSysex(requestAllPresets());\n    };\n\n\n    getBytesPresetsAsBlob() {\n        // const a = [];\n        // this.bytesPresets.forEach(\n        //     p => p.forEach(\n        //         b => a.push(...b)\n        //     )\n        // );\n        // return a;\n        return new Uint8Array(flatDeep(this.bytesPresets, 100));\n    }\n\n    isBytesPresetEmpty() {\n        return !this.bytesPresets.some(e => e && e.length > 0);\n    }\n\n    storeBytes(messages) {\n\n        let i = 0;\n        let cont = true;\n        while (cont) {\n            i = messages.indexOf(SYSEX_START, i);\n            if (i < 0) break;\n\n            i++;\n            let k = messages.indexOf(SYSEX_END, i);\n            let m = messages.slice(i-1, k+1)\n            const bi = getBytesIndex(m);\n            if (bi) {\n                if (bi.isPresetName) {\n                    // console.log(\"receiving a preset; clear bytes\");\n                    this.bytesPresets[bi.presetNum] = [];\n                }\n                if (bi.isPreset) {\n                    this.bytesPresets[bi.presetNum].push(m);\n                } else if (bi.isGlobal) {\n                    this.bytesGlobal.push(m);\n                    // console.log(\"storeBytes: global\");\n                } else {\n                    console.warn(\"storeBytes: unsupported message\", m);\n                }\n            }\n\n        }\n    }\n\n    async readFiles(files) {\n\n        // console.log(\"readFiles\", files);\n\n        // this.bytes = null;\n\n        // let data = this.data;\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n\n                    console.log(\"readFiles: reading\");\n\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n\n                    if (isSysexData(data)) {\n                        // console.log(\"readFiles: file is sysex\");\n                        this.data = mergeDeep(this.data || {}, parseSysexDump(data))\n                        this.storeBytes(data);\n                    } else {\n                        console.log(\"readFiles: not a sysex file\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n        // this.props.state.data = data;\n    }\n\n    updatePacer() {\n        //FIXME: externalize this method\n\n        this.showBusy({busy: true, busyMessage: \"write Preset...\"});\n\n        Object.getOwnPropertyNames(this.updateMessages).forEach(\n            presetId => {\n                Object.getOwnPropertyNames(this.updateMessages[presetId]).forEach(\n                    ctrlType => {\n                        Object.getOwnPropertyNames(this.updateMessages[presetId][ctrlType]).forEach(\n                            ctrl => {\n                                this.updateMessages[presetId][ctrlType][ctrl].forEach(\n                                    msg => {\n                                        this.sendSysex(msg);\n                                    }\n                                );\n                            }\n                        );\n                    }\n                );\n            }\n        );\n\n        //FIXME: update this code\n        setTimeout(\n            () => {\n                this.changed = false;\n                this.updateMessages = {};\n                this.readPreset(this.currentPresetIndex);\n            },\n            1000\n        );\n    }\n\n    /**\n     * Send the current data saved in state.bytes\n     * @param patch\n     */\n    sendDump = async () => {\n\n        // console.log(\"sendDump\");\n\n        if (!this.midi.output) {\n            console.warn(\"sendPatch: no output enabled to send the message\");\n            return;\n        }\n\n        // let out = outputById(this.state.output);\n        // if (!out) {\n        //     console.warn(`send: output ${this.state.output} not found`);\n        //     return;\n        // }\n\n        // this.showBusy({busy: true, busyMessage: \"sending dump...\"});\n\n        this.sendProgress = 'building sysex messages...';\n        await wait(20); // to force an update to of the UI to display the above message\n\n        // console.log(this.sendProgress);\n\n        const messages = splitDump(Array.from(this.getBytesPresetsAsBlob()));\n\n        let i = 0;\n        let t = messages.length;\n\n        for (const message of messages) {\n            i++;\n            this.sendProgress = `sending message ${i} of ${t} (${Math.round(i*100/t)}%)`;\n            this.sendSysex(message);\n            await wait(10);\n        }\n\n        setTimeout(() => this.sendProgress = null, 2000);\n    };\n\n\n} // class StateStore\n\ndecorate(StateStore, {\n    bytes: observable,\n\n    bytesPresets: observable,\n    bytesGlobal: observable,\n    sendProgress: observable,\n    // sendProgressTotal: observable,\n\n    data: observable,\n    currentPresetIndex: observable,\n    currentControl: observable,\n    // presetIndex: observable,\n    updateMessages: observable,\n    midi: observable,\n    // pacerPresent: observable,\n    connected: computed,\n    busy: observable,\n    busyMessage: observable,\n    progress: observable,\n    decBase: observable,\n    extControls: observable,\n    forceReread: observable,\n    changed: observable,\n    D6InfoVisible: observable\n});\n\n// export default new StateStore();\nexport const state = new StateStore();\n","import React, {Component} from 'react';\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content home\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This editor requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                    <p>This editor does not work on iPad or Android tablet either.</p>\n                    <p>Ensure your Pacer is running the <a href=\"https://nektartech.com/updating-firmware-pacer/\" target=\"_blank\" rel=\"noopener noreferrer\">latest firmware v10112</a>.</p>\n                </div>\n\n                <h1>Known issues</h1>\n\n                <div className=\"doc\">\n                    <p>The preset D6 cannot be read.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer. This is planned for a future release.</p>\n                    <p>This editor is provided as-is, without warranty of any kind, express or implied. If you encounter a bug, please fill a bug report with <a href=\"https://github.com/francoisgeorgy/pacer-editor/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">this form</a>.</p>\n                </div>\n\n                <h1>Connecting your Pacer</h1>\n\n                <div className=\"doc\">\n                    <p>Make sure your Pacer is connected to your computer and switched-on.</p>\n                    <p>This editor listen on all MIDI ports. A future version may offer the possibility to choose a specific port.</p>\n                    <p>In case of problem, when either the application or Pacer does not respond or communicate, try to reload the application (refresh the page) or reboot the Pacer.</p>\n                    <p>You can find info about WebMIDI at <a href=\"https://studiocode.dev/support/webmidi/\" target=\"_blank\" rel=\"noopener noreferrer\">studiocode.dev/support/webmidi</a></p>\n                </div>\n\n                <h1>Editing presets</h1>\n                <div className=\"doc\">\n                    <p>The preset <span className=\"strong\">CUR</span> is the <span className=\"italic fluo\">current</span> preset.\n                        When you edit preset <span className=\"strong\">CUR</span> your changes are immediately applied.</p>\n                    <p>When you edit any other presets, you edit the <span className=\"fluo\">saved</span> settings of the preset\n                        and your changes will only be applied when you <span className=\"fluo\">load</span> this preset in the Pacer.</p>\n                    <p>It is currently not possible to load the preset from this editor.</p>\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A5</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">A5</span>.</p>\n                        <p>After you save your modifications, the display will show dots. That means the current preset does not reflect the saved preset anymore.\n                            You have to <span className=\"fluo\">reload</span> the preset to be able to use your updated version:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">A</span>, then press switch <span className=\"strong\">5</span>.</p>\n                    </div>\n\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A1</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">D3</span>.</p>\n                        <p>After you save your modifications of preset <span className=\"strong\">D3</span>, if you want to use it, of course you have to load it:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">D</span>, then press switch <span className=\"strong\">3</span>.</p>\n                    </div>\n\n                </div>\n\n                <h1>Controls settings</h1>\n                <div className=\"doc\">\n                    <p>Each control (buttons 1-6 & A-D, external FS1-FS4 & EXP1-EXP2) can be configured with up to 6 steps.</p>\n                    <p>At the most basic level, each step has a <span className=\"italic fluo\">type</span> value that determines the message or action the step will send or execute, as well as 3 data fields\n                        that configure the options and parameters for the step depending on the selected type.</p>\n\n                    <table className=\"doc-controls\">\n                        <thead>\n                        <tr>\n                            <th><br />Type</th>\n                            <th><br />Description</th>\n                            <th>Data 1<br />desc.</th>\n                            <th>Data 1<br />values</th>\n                            <th>Data 2<br />desc.</th>\n                            <th>Data 2<br />values</th>\n                            <th>Data 3<br />desc.</th>\n                            <th>Data 3<br />values</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Toggle</td>\n                            <td className=\"ctrl-desc\">Sends a MIDI CC message that toggles between two values each time the button is pressed</td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send on Press 1</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send on Press 2</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Trigger</td>\n                            <td className=\"ctrl-desc\">Sends a MIDI CC message when the button is pressed</td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send when pressing down</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send when releasing</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Step</td>\n                            <td className=\"ctrl-desc\"> ??? </td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td>Start value</td>\n                            <td>0-127</td>\n                            <td>End value</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Note</td>\n                            <td className=\"ctrl-desc\">Send a note when the button is pressed, stop when released</td>\n                            <td>Note</td>\n                            <td>0-127</td>\n                            <td>Velocity</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Note Toggle</td>\n                            <td className=\"ctrl-desc\">Send a note when the button is pressed, stop when pressed again</td>\n                            <td>Note</td>\n                            <td>0-127</td>\n                            <td>Velocity</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Program & Bank</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Program Change message when the button is pressed</td>\n                            <td>Program</td>\n                            <td>0-127</td>\n                            <td>Bank LSB</td>\n                            <td>0-127</td>\n                            <td>Bank MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Program Step</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Program Step message ??? </td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td>Start</td>\n                            <td>0-127</td>\n                            <td>End</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">NRPN Coarse</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Non-Registered Parameter Number Coarse message</td>\n                            <td>Value</td>\n                            <td>0-127</td>\n                            <td>LSB</td>\n                            <td>0-127</td>\n                            <td>MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">NRPN Fine</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Non-Registered Parameter Number Fine message</td>\n                            <td>Value</td>\n                            <td>0-127</td>\n                            <td>LSB</td>\n                            <td>0-127</td>\n                            <td>MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">MIDI Machine Control</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Machine Control message</td>\n                            <td>Device ID</td>\n                            <td>0-127</td>\n                            <td>Command</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Relay Outputs</td>\n                            <td className=\"ctrl-desc\">Action a Pacer Relay</td>\n                            <td>Mode</td>\n                            <td>N.O.: 1<br />N.C.: 2<br />Lat.: 3</td>\n                            <td>Relay</td>\n                            <td>R1: 0<br />R2: 1<br />R3: 2<br />R4: 3</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Preset Select</td>\n                            <td className=\"ctrl-desc\">Switch to the target Preset</td>\n                            <td>Target</td>\n                            <td><span className=\"no-break\">(Bank * 6) + Num</span><br />Bank A=0,<br />Bank B=1..</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Preset Inc/Dec</td>\n                            <td className=\"ctrl-desc\">Switch to the next/previous Preset</td>\n                            <td>Direction</td>\n                            <td>Increment: ??<br />Decrement: ??</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Step Select</td>\n                            <td className=\"ctrl-desc\">?? Action a specific Step for a Control</td>\n                            <td>Control Target</td>\n                            <td>?? A-D,<br />1-6,<br />FS1-4,<br />EXP1-2</td>\n                            <td>Step</td>\n                            <td>?? 1-6 (0-indexed?)</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Step Inc/Dec</td>\n                            <td className=\"ctrl-desc\">?? Action the next/prev Step for a Control</td>\n                            <td>Control Target</td>\n                            <td>?? A-D,<br />1-6,<br />FS1-4,<br />EXP1-2</td>\n                            <td>Direction</td>\n                            <td>Increment: ??<br />Decrement: ??</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">OFF</td>\n                            <td className=\"ctrl-desc\">Disable the control, do not action nor send anything</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                <h1>In case of problem</h1>\n                <div className=\"doc\">\n                    <p>Try the following:</p>\n                    <p>- Check the MIDI configuration.</p>\n                    <p>- Reload the editor (F5 or Cmd-R or Ctrl-R)</p>\n                    <p>- Restart the Pacer.</p>\n                    <p>- Close any other applications that may be connected to the Pacer.</p>\n                    <p>If you mess up the configuration of your Pacer, do a <span className=\"fluo\">Factory Restore</span>. See page 21 of the Pacer User Guide for the procedure.</p>\n                </div>\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Known issues</h1>\n\n                <div className=\"doc\">\n                    <p>- The preset D6 cannot be read by sending a \"read preset\" sysex. You have to dump it from the Pacer.</p>\n                    <p>- LED configuration is displayed for external footswitch and expression pedals.</p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    <p>Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                        This editor would not have been possible without their support.</p>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import {\n    MSG_AD_ATCHAN,\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_CTRL_OFF,\n    MSG_DAWFUNC,\n    MSG_ENC_ATCHAN,\n    MSG_ENC_CC,\n    MSG_ENC_MIDICC_REL,\n    MSG_ENC_NRPN_COARSE,\n    MSG_ENC_NRPN_FINE,\n    MSG_ENC_PITCH, MSG_ENC_PRESET_SELECT,\n    MSG_ENC_PROGRAM, MSG_ENC_STEP_SELECT, MSG_LOAD_CC,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MMC,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_RELAY,\n    MSG_SW_STEP_INC_DEC,\n    MSG_SW_STEP_SELECT, PRESET_TARGET, RELAY_MODE_LABEL, TARGET_NAME\n} from \"./constants\";\n// SYSEX:\n// 0x01\tCurrent user\n// 0x02\tTrack\n// 0x03\tTransport\n// 0x04\t1A\n// 0x05\t2A\n// 0x06\t3A\n// 0x07\t4A\n// 0x08\t5A\n// 0x09\t6A\n// 0x0A\t1B\n// 0x0B\t2B\n// 0x0C\t3B\n// 0x0D\t4B\n// 0x0E\t5B\n// 0x0F\t6B\n// 0x10\t1C\n// 0x11\t2C\n// 0x12\t3C\n// 0x13\t4C\n// 0x14\t5C\n// 0x15\t6C\n// 0x16\t1D\n// 0x17\t2D\n// 0x18\t3D\n// 0x19\t4D\n// 0x1A\t5D\n// 0x1B\t6D\n\n\n/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    let ii = parseInt(index);\n    if (ii === 0) return \"current\";\n    //TODO: check valid range\n    let b = Math.floor((ii - 1) / 6);\n    let i = (ii - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => \"23\"\n * @param xy\n * @returns {String}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return (bank * 6 + num).toString();\n};\n\nconst UP_ARROW = '\\u21E7';\nconst DOWN_ARROW = '\\u21E9';\n\nexport const MessageSummary = message => {\n\n    if (message === null || message === undefined) return '';\n\n    const data = message[\"data\"];\n    switch (message[\"msg_type\"]) {\n\n        case MSG_AD_MIDI_CC: return `CC${data[0]} min ${data[1]} max ${data[2]}`;\n        case MSG_AD_NRPN_COARSE: return `NRPN C max ${data[0]} ${data[1]}: ${data[2]}`;\n        case MSG_AD_NRPN_FINE: return `NRPN F max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_AD_PITCH_BEND: return `PITCH min ${data[1]} max ${data[2]}`;\n        case MSG_AD_ATCHAN: return `AT CHAN min ${data[1]} max ${data[2]}`;\n        case MSG_DAWFUNC: return `DAW FUNC ${data[0]}`;\n        case MSG_CTRL_OFF: return `OFF`;\n\n        case MSG_SW_MIDI_CC_TGGLE: return `CC${data[0]} toggle ${data[1]} \\u21C4 ${data[2]}`;\n        case MSG_SW_MIDI_CC: return `CC${data[0]} ${DOWN_ARROW}${data[1]} ${UP_ARROW}${data[2]}`;\n        case MSG_SW_MIDI_CC_STEP: return `CC${data[0]} step ${data[1]} to ${data[2]}`;\n\n        case MSG_SW_NOTE: return `NOTE ${data[0]} vel ${data[1]}`;\n        case MSG_SW_NOTE_TGGLE: return `NOTE TOGGLE ${data[0]} vel ${data[1]}`;\n\n        case MSG_SW_PRG_BANK: return `PRG BANK ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_SW_PRG_STEP: return `PRG STEP ${data[1]} to ${data[2]}`;\n\n        case MSG_SW_NRPN_COARSE: return `NRPN C ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_SW_NRPN_FINE: return `NRPN F ${data[0]} ${data[1]}:${data[2]}`;\n\n        case MSG_SW_MMC: return `MMC ID ${data[0]} cmd ${data[1]}`;\n\n        case MSG_SW_RELAY: return `RELAY ${data[1]} ${RELAY_MODE_LABEL[data[0]]}`;\n\n        case MSG_SW_PRESET_SELECT: return `PRESET SELECT ${PRESET_TARGET[data[0]]}`;\n        case MSG_SW_PRESET_INC_DEC: return `PRESET ${data[0]?'DEC':'INC'}`;\n\n        case MSG_SW_STEP_SELECT: return `${TARGET_NAME[data[0]]} step ${data[1]}`;\n        case MSG_SW_STEP_INC_DEC: return `STEP ${data[1]?'DEC':'INC'} '${TARGET_NAME[data[0]]}'`;\n\n        case MSG_ENC_CC: return `MSG_ENC_CC ${data[0]} ${data[1]} ${data[2]}`;\n        case MSG_ENC_MIDICC_REL: return `CC REL ${data[0]}`;\n        case MSG_ENC_NRPN_COARSE: return `NRPN C max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_ENC_NRPN_FINE: return `NRPN F max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_ENC_PITCH: return `PITCH min ${data[1]} max ${data[2]}`;\n        case MSG_ENC_ATCHAN: return `AT CHAN min ${data[1]} max ${data[2]}`;\n        case MSG_ENC_PROGRAM: return `PRG ${data[1]} to ${data[2]}`;\n        case MSG_ENC_PRESET_SELECT: return `PRESET SEL ${data[1]} to ${data[2]}`;\n        case MSG_ENC_STEP_SELECT: return `STEP SELECT '${TARGET_NAME[data[0]]}', ${data[1]} to ${data[2]}`;\n\n        case MSG_LOAD_CC: return `CC${data[0]} ${data[1]}`;\n\n        default: return `?${message[\"msg_type\"]}? ${data[0]} ${data[1]} ${data[2]}`;\n    }\n};","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {\n    MSG_SW_NOTE,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME, CONTROL_MODES, TARGET_PRESET\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport \"./DumpSysex.css\";\n\n/*\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n*/\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                    <tr>\n                        <td colSpan={10}>control mode: {CONTROL_MODES[config[\"control_mode\"]]}</td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): {data[\"name\"]}</h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\n// const Presets = ({ presets }) => {\n//     if (presets === null || presets === undefined) return null;\n//     return (\n//         <div>\n//             {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n//         </div>\n//     );\n// };\n\nclass DumpSysex extends Component {\n// const DumpSysex = ({ data }) => {\n    render() {\n        const data = this.props.state.data;\n        // return <pre>{JSON.stringify(data, null, 4)}</pre>;\n        if (!data) return null;\n        console.log(\"DumpSysex render\");\n        return (\n            <div className=\"dump code\">\n                <div>\n                    {Object.keys(data[TARGET_PRESET]).map(idx => <Preset key={idx} index={idx} data={data[TARGET_PRESET][idx]} />)}\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default inject('state')(observer(DumpSysex));\n// export default DumpSysex;\n","import React, {Component} from 'react';\nimport {\n    checksum,\n    parseSysexDump,\n    requestAllPresets,\n    requestPreset,\n    requestPresetObj, SYSEX_END, SYSEX_START\n} from \"../pacer/sysex\";\nimport {SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./Debug.css\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {SYSEX_HEADER} from \"../pacer/constants\";\nimport {inject, observer} from \"mobx-react\";\n\nfunction replacerDec2Hex(key, value) {\n    return typeof value === 'number' ? '0x' + h(value) : value;\n}\n\nfunction toSysExMessage(data) {\n    // console.log(\"toSysExMessage\", data, typeof data);\n    if (data === null) return null;\n    return [SYSEX_START, ...SYSEX_SIGNATURE, ...data, SYSEX_END];\n}\n\n// function batchMessages(callback, wait) {\n//\n//     let messages = [];  // batch of received messages\n//     let timeout;\n//\n//     return function() {\n//         clearTimeout(timeout);\n//         let event = arguments[0];\n//         messages.push(event.data);\n//         timeout = setTimeout(() => {\n//             // console.log(\"timeout elapsed\");\n//             timeout = null;\n//             callback(messages);\n//             messages = [];\n//         }, wait);\n//     };\n// }\n\nclass Debug extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0),\n            bytesExpected: 189\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1),\n            bytesExpected: 189\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D),\n            bytesExpected: 7\n        }, {\n            name: \"read all presets (takes some time)\",\n            message: requestAllPresets(),\n            bytesExpected: 4536\n        }],\n        customMessage: \"\"\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n\n/*\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            console.log(`total bytes received = ${messages.length}`);\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n*/\n\n/*\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n*/\n\n/*\n    /!**\n     *\n     * @param msg\n     *!/\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n*/\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    getCustomMessageData = () => {\n        if (this.state.customMessage && this.state.customMessage !== \"\") {\n            let d = fromHexString(this.state.customMessage, / /g);\n            if (d) {\n                let data = Array.from(d);\n                // console.log(\"getCustomMessageData\", data, typeof data);\n                if (data && data.length > 0) {\n                    data.push(checksum(data));\n                    // let tmp = SYSEX_HEADER.concat(d);\n                    // console.log(\"return custom message data\", tmp, hs(data));\n                    // return SYSEX_HEADER.concat(d);\n                    return [SYSEX_HEADER, ...d];\n                    // return data;\n                }\n            }\n        }\n        return null;\n    };\n\n    sendCustomMessage = () => {\n        let d = this.getCustomMessageData();\n        if (d && d.length > 0) {\n            this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: -1});\n            this.sendSysex(d);\n        }\n        // if (this.state.customMessage) {\n        //     let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        //     if (data && data.length > 0) {\n        //         data.push(checksum(data));\n        //         this.sendSysex(SYSEX_HEADER.concat(data));\n        //     }\n        // }\n    };\n\n    sendMessage = (msg) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: msg.bytesExpected});\n        this.props.state.sendSysex(msg.message);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        console.log(\"Debug render\");\n\n        const { messages, customMessage } = this.state;\n        const { data } = this.props.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        let hex_msg = '';\n        let s = (customMessage.toUpperCase().match(/[0-9A-F]+/g) || []).join('');\n        for (let i=0; i < s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) hex_msg += ' ';\n            hex_msg += s[i];\n        }\n\n        let u = toSysExMessage(this.getCustomMessageData());\n        let v = u ? JSON.stringify(parseSysexDump(Uint8Array.from(toSysExMessage(this.getCustomMessageData()))), replacerDec2Hex, 4) : \"\";\n\n        return (\n            <div className=\"wrapper\">\n\n{/*\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onOutputConnection={this.onOutputConnection}\n                          onOutputDisconnection={this.onOutputDisconnection}>\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n*/}\n\n                <div className=\"content\">\n\n                    <div className=\"content-row-content\">\n                        <div className=\"debug\">\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content first\">\n                        <h2>Test messages:</h2>\n                        <div className=\"content-row-content-content\">\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg)}>send</button>\n                                <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                <span className=\"message-name\"> {msg.name}</span>\n                            </div>\n                        )}\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Custom message:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"send-message\">\n                                <button onClick={this.sendCustomMessage} disabled={(s.length % 2) !== 0}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                <input type=\"text\" className=\"code\" size=\"80\" value={customMessage}\n                                       placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                <span className=\"code light\"> {h(cs)}</span>\n                            </div>\n\n                            <div className=\"custom-message code\">\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)}</span> {hex_msg} <span className=\"code light\">{h(cs)}</span>\n                            </div>\n\n                            <div className=\"debug\">\n                                {v ? <pre>{v}</pre> : <div>Invalid message. Send at your own risk.</div>}\n                                {/*<pre>{hs(toSysExMessage(this.getCustomMessageData()))}</pre>*/}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Response:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"message code\">\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                    </div>\n\n{/*\n                    <div className=\"content-row-content\">\n                        {messages.map((msg, i) => {\n                            let d = Uint8Array.from(toSysExMessage(msg.message));\n                            console.log('d', d);\n                            return isSysexData(d) ?\n                                <div className=\"debug\" key={i}>\n                                    <h4>[Debug] sysex data to send:</h4>\n                                    <pre>{JSON.stringify(parseSysexDump(d), null, 4)}</pre>\n                                </div> :\n                                <div key={i}>nop {hs(d)}</div>\n                            }\n                        )}\n                    </div>\n*/}\n{/*\n                    <div className=\"content-row-content\">\n                        {data &&\n                        <div className=\"debug\">\n                            <h4>[Debug] sysex data received:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                        }\n                    </div>\n*/}\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default inject('state')(observer(Debug));\n\n","import React, {Component} from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport {inject, observer} from \"mobx-react\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, controlIndex, selected, onSelect }) => {\n    // console.log(\"Control\", name, controlIndex, typeof name, typeof controlIndex);\n    return (\n        <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onSelect(controlIndex)}>\n            <div className=\"name\">{name}</div>\n        </div>\n    );\n}\n\n\nclass ControlSelector extends Component {\n\n    selectControl = (controlId) => {\n        this.props.state.selectControl(controlId);\n    };\n\n    render() {\n        const c = this.props.state.currentControl;\n        return (\n            <div className=\"controls\">\n                {FOOTSWITCHES.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                {EXPPEDALS.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                <div className=\"no-control\">&nbsp;</div>\n                {STOMPSWITCHES_TOP.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                <div className=\"no-control\">&nbsp;</div>\n                {STOMPSWITCHES_BOTTOM.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ControlSelector));\n","import {\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2, CONTROL_FOOTSWITCH_1, CONTROL_FOOTSWITCH_2, CONTROL_FOOTSWITCH_3, CONTROL_FOOTSWITCH_4,\n    CONTROL_STOMPSWITCH_1, CONTROL_STOMPSWITCH_2, CONTROL_STOMPSWITCH_3, CONTROL_STOMPSWITCH_4, CONTROL_STOMPSWITCH_5,\n    CONTROL_STOMPSWITCH_6, CONTROL_STOMPSWITCH_A, CONTROL_STOMPSWITCH_B, CONTROL_STOMPSWITCH_C, CONTROL_STOMPSWITCH_D,\n    MSG_TYPES_EXP_PEDAL,\n    MSG_TYPES_FOOTWITCH, MSG_TYPES_STOMPSWITCH\n} from \"./constants\";\n\nexport function getAvailableMessageTypes(controlId) {\n    switch (parseInt(controlId)) {\n        case CONTROL_STOMPSWITCH_1:\n        case CONTROL_STOMPSWITCH_2:\n        case CONTROL_STOMPSWITCH_3:\n        case CONTROL_STOMPSWITCH_4:\n        case CONTROL_STOMPSWITCH_5:\n        case CONTROL_STOMPSWITCH_6:\n        case CONTROL_STOMPSWITCH_A:\n        case CONTROL_STOMPSWITCH_B:\n        case CONTROL_STOMPSWITCH_C:\n        case CONTROL_STOMPSWITCH_D:\n            return MSG_TYPES_STOMPSWITCH;\n        case CONTROL_FOOTSWITCH_1:\n        case CONTROL_FOOTSWITCH_2:\n        case CONTROL_FOOTSWITCH_3:\n        case CONTROL_FOOTSWITCH_4:\n            return MSG_TYPES_FOOTWITCH;\n        case CONTROL_EXPRESSION_PEDAL_1:\n        case CONTROL_EXPRESSION_PEDAL_2:\n            return MSG_TYPES_EXP_PEDAL;\n        default:\n            return [];\n    }\n}\n","import React from 'react';\nimport {\n    MSG_AD_ATCHAN,\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_CTRL_OFF,\n    MSG_DAWFUNC,\n    MSG_ENC_ATCHAN,\n    MSG_ENC_CC,\n    MSG_ENC_MIDICC_REL,\n    MSG_ENC_NRPN_COARSE,\n    MSG_ENC_NRPN_FINE,\n    MSG_ENC_PITCH, MSG_ENC_PRESET_SELECT,\n    MSG_ENC_PROGRAM, MSG_ENC_STEP_SELECT, MSG_LOAD_CC,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MMC,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_RELAY,\n    MSG_SW_STEP_INC_DEC,\n    MSG_SW_STEP_SELECT, MSG_TYPES_DATA_USAGE, PRESET_TARGET,\n    TARGET_NAME\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\n\nexport const DataInputField = ({ msgType, value, dataIndex, onChange }) => {\n\n    if (!MSG_TYPES_DATA_USAGE[msgType][dataIndex]) return '';\n\n    switch (msgType) {\n\n        case MSG_CTRL_OFF:\n            return '';\n\n        case MSG_SW_NOTE:\n        case MSG_SW_NOTE_TGGLE:\n            if (dataIndex !== 0) {\n                return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)} />;\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)} className=\"notes\">{\n                        Array.from(Array(127).keys()).map(i => {\n                            const n = Note.fromMidi(i, true);\n                            return <option key={i} value={i}>{n} ({i})</option>\n                        })\n                    }</select>\n                );\n            }\n\n        case MSG_SW_STEP_SELECT:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>{\n                        TARGET_NAME.map((target, index) => {\n                            return target ? <option key={index} value={index}>{target}</option> : null\n                        })\n                    }</select>);\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                    </select>);\n            }\n\n        case MSG_SW_STEP_INC_DEC:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>{\n                        TARGET_NAME.map((target, index) => {\n                            return target ? <option key={index} value={index}>{target}</option> : null\n                        })\n                    }</select>);\n            } else {\n                return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)}/>;\n            }\n\n        case MSG_SW_RELAY:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={0}>Auto detect</option>\n                        <option value={1}>Normally open</option>\n                        <option value={2}>Normally closed</option>\n                        <option value={3}>Latching</option>\n                    </select>);\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={0}>Relay 1</option>\n                        <option value={1}>Relay 2</option>\n                        <option value={2}>Relay 3</option>\n                        <option value={3}>Relay 4</option>\n                    </select>);\n            }\n\n        case MSG_SW_PRESET_SELECT:\n        case MSG_ENC_PRESET_SELECT:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        {PRESET_TARGET.map((name, index) => <option key={index} value={index}>{name}</option>)}\n                    </select>);\n            } else {\n                return '';\n            }\n\n        case MSG_AD_MIDI_CC:\n        case MSG_AD_NRPN_COARSE:\n        case MSG_AD_NRPN_FINE: \n        case MSG_AD_PITCH_BEND: \n        case MSG_AD_ATCHAN: \n        case MSG_DAWFUNC:\n        case MSG_SW_MIDI_CC_TGGLE:\n        case MSG_SW_MIDI_CC: \n        case MSG_SW_MIDI_CC_STEP: \n        case MSG_SW_PRG_BANK:\n        case MSG_SW_PRG_STEP: \n        case MSG_SW_NRPN_COARSE: \n        case MSG_SW_NRPN_FINE: \n        case MSG_SW_MMC: \n        case MSG_SW_PRESET_INC_DEC:\n        case MSG_ENC_CC:\n        case MSG_ENC_MIDICC_REL: \n        case MSG_ENC_NRPN_COARSE: \n        case MSG_ENC_NRPN_FINE: \n        case MSG_ENC_PITCH: \n        case MSG_ENC_ATCHAN: \n        case MSG_ENC_PROGRAM: \n        case MSG_ENC_STEP_SELECT:\n        case MSG_LOAD_CC:\n        default:\n            return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)} />\n    }\n\n};\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME, TARGET_PRESET\n} from \"../pacer/constants\";\nimport \"./ControlStepsEditor.css\";\nimport {getAvailableMessageTypes} from \"../pacer/model\";\nimport {DataInputField} from \"./DataInputField\";\nimport {inject, observer} from \"mobx-react\";\nimport {CONTROLS_DATA} from \"../pacer/sysex\";\nimport {state} from \"../stores/StateStore\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            {Object.keys(COLORS).map(colorIndex => <option key={colorIndex} value={colorIndex}>{COLORS[colorIndex]}</option>)}\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\n/*\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select value={note} onChange={(event) => onChange(event.target.value)} className=\"notes\">\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n} ({i})</option>\n                    })\n            }\n        </select>\n    );\n};\n*/\n\nconst Step = observer(({ presetIndex, controlId, stepIndex, config }) => {\n\n    // console.log(presetIndex, controlId, stepIndex, typeof presetIndex, typeof controlId, typeof stepIndex, JSON.stringify(config));\n\n    const updateData = (dataIndex, value) => {\n        state.updateControlStep(controlId, stepIndex, \"data\", dataIndex, value, presetIndex);\n    }\n    const updateChannel = (value) => {\n        state.updateControlStep(controlId, stepIndex, \"channel\", null, value, presetIndex);\n    }\n    const updateLED = (led, value) => {\n        state.updateControlStep(controlId, stepIndex, led, null, value, presetIndex);\n    }\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    // console.log(\"config.msg_type\", config.msg_type, inactive, getAvailableMessageTypes(controlId));\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {stepIndex}:</div>\n                <div>\n                    <select value={config.msg_type} onChange={(event) => state.updateControlStepMessageType(controlId, stepIndex, event.target.value, presetIndex)}>\n                        {getAvailableMessageTypes(controlId).map(mtype => <option key={mtype} value={mtype}>{MSG_TYPES_FULLNAME[mtype]}</option>)}\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    if (!config.data) return null;\n\n    let d0, d1, d2;\n    d0 = <DataInputField msgType={config.msg_type} value={config.data[0]} dataIndex={0} onChange={updateData} />;\n    d1 = <DataInputField msgType={config.msg_type} value={config.data[1]} dataIndex={1} onChange={updateData} />;\n    d2 = <DataInputField msgType={config.msg_type} value={config.data[2]} dataIndex={2} onChange={updateData} />;\n\n    // console.log(\"config.msg_type\", config.msg_type, typeof config.msg_type);\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {stepIndex}:</div>\n            <div>\n                <select value={config.msg_type} onChange={(event) => state.updateControlStepMessageType(controlId, stepIndex, event.target.value, presetIndex)}>\n                    {getAvailableMessageTypes(controlId).map(mtype => <option key={mtype} value={mtype}>{MSG_TYPES_FULLNAME[mtype]}</option>)}\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][0] : ''}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][1] : ''}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][2] : ''}</div></div>\n            <div>\n                <select value={config.channel} onChange={(event) => updateChannel(event.target.value)}>\n                    {Array.from(Array(17).keys()).map(i => <option key={i} value={i}>{i === 0 ? 'global' : i}</option>)}\n                </select>\n            </div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateLED(\"led_inactive_color\", value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateLED(\"led_active_color\", value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateLED(\"led_num\", value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateLED(\"led_midi_ctrl\", value)} />\n            </div>\n        </Fragment>\n    );\n});\n\nclass ControlStepsEditor extends Component {\n\n    render() {\n\n        const steps = this.props.state.data[TARGET_PRESET][this.props.presetIndex][CONTROLS_DATA][this.props.controlId][\"steps\"];\n\n        // console.log(JSON.stringify(steps), Object.keys(steps));\n\n        //FIXME: do not display LED for EXP and FS\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                {Object.keys(steps).map(stepIndex =>\n                    <Step key={stepIndex} presetIndex={this.props.presetIndex} controlId={this.props.controlId} stepIndex={stepIndex} config={steps[stepIndex]} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ControlStepsEditor));\n","import React from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nconst ControlModeEditor = (props) => {\n    return (\n        <div className=\"control-mode\">\n            <span className=\"step-row-header\">Control mode:</span>\n            <select onChange={(event) => props.onUpdate(event.target.value)} value={props.mode}>\n                {Object.keys(CONTROL_MODES).map(key => <option key={key} value={key}>{CONTROL_MODES[key]}</option>)}\n            </select>\n        </div>\n    );\n};\n\nexport default ControlModeEditor;\n","import React, {Component} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        this.props.state.updatePresetName(this.props.state.currentPresetIndex, event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n\n        const presetIndex = this.props.state.currentPresetIndex;\n\n\n        // console.log(\"PresetNameEditor render\", presetIndex, this.props.state.data[TARGET_PRESET][presetIndex]);\n\n        const name= this.props.state.data[TARGET_PRESET][presetIndex][\"name\"];\n        return (\n            <div className=\"preset-name-editor\">\n                <label>Name:</label> <input value={name} onChange={this.onNameUpdate} size={8} />\n                max 5 characters\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(PresetNameEditor));\n","import React, {Component, Fragment} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {presetXYToIndex} from \"../pacer/utils\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\nimport {state} from \"../stores/StateStore\";\nimport \"./PresetSelector.css\";\n\n// TODO: is observer needed here?\nconst Selector = observer(({ xyId, presetIndex, hasData, name, onClick }) => {\n\n    // console.log(\"Selector\", xyId, presetIndex, state.currentPreset, typeof presetIndex, typeof state.currentPreset);\n\n    let c = \"selector\";\n    const selected = presetIndex === state.currentPresetIndex;\n    if (selected) c += \" selected\";\n    if (!selected && hasData) c += \" loaded\";\n\n    if (xyId === \"CURRENT\" && name) {\n        return (<div className={c} onClick={() => onClick(presetIndex)}>\n            CUR: {name}\n        </div>);\n    } else {\n        return (<div className={c} onClick={() => onClick(presetIndex)}>\n            <span className=\"preset-id\">{xyId}</span> <span className=\"preset-name\">{name}</span>\n        </div>);\n    }\n\n});\n\nclass PresetSelector extends Component {\n\n    selectPreset = (index) => {     // index must be a string\n        this.props.state.selectPreset(index);\n        const data = this.props.state.data;\n        if (index === \"24\") {\n            this.props.state.showD6Info();\n            return;\n        }\n        if (!(!this.props.state.forceReread && data && data[TARGET_PRESET] && data[TARGET_PRESET][index])) {\n            this.props.state.readPreset(index, \"reading Pacer...\");\n        }\n    };\n\n    render() {\n        const {data, currentPresetIndex} = this.props.state;\n        // console.log(\"PresetSelector render\", currentPreset, typeof currentPreset);\n\n        let curHasData = data && data[TARGET_PRESET] && data[TARGET_PRESET][0];\n\n        let currName = curHasData ? data[TARGET_PRESET][0][\"name\"] : \"\";\n\n\n        return (\n            <div>\n            <div className=\"selectors\">\n                <div className=\"preset-selectors\">\n                    <Selector xyId={\"CURRENT\"} presetIndex={\"0\"} name={currName} xselected={!!currentPresetIndex} onClick={this.selectPreset} key={0}/>\n                    <div></div>\n                    <div></div>\n                    <div className=\"force-read\">\n                        <label>\n                            <input type=\"checkbox\" checked={this.props.state.forceReread} onChange={this.props.state.toggleForceReread} />\n                            Always read from Pacer\n                        </label>\n                    </div>\n                    {\n                        ['A', 'B', 'C', 'D'].map(\n                            letter =>\n                                <Fragment key={letter}>\n                                {\n                                    Array.from(Array(6).keys()).map(\n                                        digit => {\n                                            let xyId = letter + (digit + 1);\n                                            let index = presetXYToIndex(xyId);\n                                            let hasData = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                            let name = hasData ? data[TARGET_PRESET][index][\"name\"] : \"\";\n                                            return <Selector xyId={xyId} presetIndex={index} hasData={hasData} name={name} key={index} onClick={this.selectPreset} />\n                                        })\n                                }\n                                </Fragment>\n                        )\n                    }\n                </div>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(PresetSelector));\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\n\nclass ActionButtons extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n    }\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        if (file) {\n            this.props.state.readFiles([file]);\n        }\n    };\n\n    clearData = () => {\n        this.props.state.clear();\n    };\n\n/*\n    toggleExtControls = e => {\n        const extControls = !this.state.extControls;\n        this.setState({extControls});\n    };\n*/\n/*\n    toggleBase = e => {\n        const decBase = !this.state.decBase;\n        this.setState({decBase});\n    };\n*/\n\n    render() {\n        // const output = this.props.state.midi.output;\n        const data = this.props.state.data;\n\n        // console.log(\"connected\", this.props.state.connected);\n\n        const canRead = this.props.state.connected;\n        const canWrite = this.props.state.connected && this.props.state.changed;\n\n        return (\n            <div className=\"preset-buttons\">\n\n                {canRead &&\n                <button className=\"action-button read\"\n                       onClick={() => this.props.state.readFullDump()}\n                       title=\"Read all presets from Pacer\">Read Pacer</button>}\n                {!canRead && <div></div>}\n\n                {canWrite && <button className=\"action-button update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>}\n                {!canWrite && <div></div>}\n\n                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                <button className=\"action-button\" onClick={this.onInputFile}>Load sysex file</button>\n\n                <div>\n                    {/*{data && <Download data={data} filename={`pacer-patch`} addTimestamp={true} label=\"Save to file\" />}*/}\n                </div>\n\n                {data && <button className=\"action-button\" onClick={this.clearData}>CLEAR ALL</button>}\n                {!data && <div></div>}\n\n                <div>\n                </div>\n{/*\n                <div className=\"preset-buttons col align-col-bottom\">\n                    <div>Click any preset to load only this preset.</div>\n                    {data && <button onClick={this.toggleExtControls}>{this.state.extControls ? \"Hide external controls\" : \"Show external controls\"}</button>}\n                    {data && <button onClick={this.toggleBase}>{this.state.decBase ? \"Display numbers in hex\" : \"Display numbers in dec\"}</button>}\n                </div>\n*/}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ActionButtons));\n","import {observer} from \"mobx-react\";\nimport {state} from \"../stores/StateStore\";\nimport PresetSelector from \"./PresetSelector\";\nimport ActionButtons from \"./ActionButtons\";\nimport React from \"react\";\n\nexport const PresetSelectorAndButtons = observer(() => {\n    return (\n        <div className=\"content-row-content first\">\n            <h2>Presets</h2>\n            <div className=\"row align-bottom\">\n                <div>\n                    <div className=\"row align-bottom\">\n                        <PresetSelector />\n                        <ActionButtons />\n                    </div>\n                    {state.D6InfoVisible &&\n                    <div className=\"d6info\">\n                        Due to a yet unsolved problem, the editor cannot read the preset D6. <br />\n                        However, you can ask the Pacer to send the preset. Use the encoder knob\n                        to select DUMP<br />in the top-level menu and then send either a full dump or only the D6 preset.\n                        <div className=\"dismiss\" onClick={() => state.hideD6Info()}>[hide]</div>\n                    </div>}\n                </div>\n            </div>\n        </div>\n    );\n});\n","import React from \"react\";\nimport {CONTROLS_FULLNAME} from \"../pacer/constants\";\nimport {observer} from \"mobx-react\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport {state} from \"../stores/StateStore\";\n\n/*\n{\n    17: {\n        controls: {\n            13: Array(13) [\n                0: (9) [127, 1, 1, 17, 13, 96, 1, 0, 127]\n                1: (29) [127, 1, 1, 17, 13, 1, 1, 0, 0, 2, 1, 71, 0, 3, 1, 22, 0, 4, 1, 127, 0, 5, 1, 0, 0, 6, 1, 1, 104]\n\n\n{\n    1:\n        midi: Array(0)\n            dummy: Array(1)\n                0: Array(29)\n                    0: 127\n                    1: 1\n                    2: 1\n\n*/\n\nconst updateMessage = (presetId, ctrlType, ctrl, messages) => {\n    switch (ctrlType) {\n        case \"controls\":\n            return <div key={`${presetId}-${ctrl}-ctrl`}>- preset {presetIndexToXY(presetId)}, control {CONTROLS_FULLNAME[ctrl]}</div>;\n        case \"midi\":\n            return <div key={`${presetId}-${ctrl}-midi`}>- preset {presetIndexToXY(presetId)}, midi</div>;\n        case \"name\":\n            return <div key={`${presetId}-${ctrl}-name`}>- preset {presetIndexToXY(presetId)}, name</div>;\n        default:\n            return null;\n    }\n};\n\nconst UpdateMessages = observer(() => {\n    if (state.updateMessages && Object.getOwnPropertyNames(state.updateMessages).length) {\n        return (\n            <div className=\"messages-to-send\">\n                <div className=\"update-messages-title\">Updates that will be sent to the Pacer:</div>\n                {\n                    //FIXME: allow object or array\n                    Object.getOwnPropertyNames(state.updateMessages).map(       // preset\n                        (presetId, i) => {\n                            return Object.getOwnPropertyNames(state.updateMessages[presetId]).map(     // control type\n                                (ctrlType, j) => {\n                                    return Object.getOwnPropertyNames(state.updateMessages[presetId][ctrlType]).map(      // control\n                                        (ctrl, k) => {\n                                            return updateMessage(presetId, ctrlType, ctrl, state.updateMessages[presetId][ctrlType][ctrl])\n                                        }\n                                    );\n                                }\n                            );\n                        }\n                    )\n                }\n            </div>);\n    } else {\n        return null;\n    }\n});\n\nexport default UpdateMessages;\n","import React, {Component, Fragment} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {CONTROLS_DATA} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {CONTROLS_FULLNAME, TARGET_PRESET} from \"../pacer/constants\";\nimport {setAutoFreeze} from \"immer\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Dropzone from \"react-dropzone\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport {dropOverlayStyle, isVal} from \"../utils/misc\";\nimport {PresetSelectorAndButtons} from \"../components/PresetSelectorAndButtons\";\nimport UpdateMessages from \"../components/UpdateMessages\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport \"./Preset.css\";\n\n//FIXME: fix this:\nsetAutoFreeze(false);   // needed to be able to update name and copy a preset at the same time. Otherwise immerjs freez the state in updateMessageName() and it is no longer possible to copy a preset.\n\nclass Preset extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false,\n            copyPresetFrom: \"-1\",\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            { dropZoneActive: false },\n            () => { this.props.state.readFiles(files) }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        this.props.state.setControlMode(parseInt(value, 10))\n    };\n\n    copyPresetFrom = (presetIdFrom, presetIdTo) => {\n        //FIXME: use immerjs\n/*\n        const { data, updateMessages } = this.state;\n\n        if (data && data[TARGET_PRESET][presetIdFrom]) {\n\n            if (!data[TARGET_PRESET][presetIdTo]) data[TARGET_PRESET][presetIdTo] = {};\n            data[TARGET_PRESET][presetIdTo][\"changed\"] = true;\n\n            if (!updateMessages.hasOwnProperty(presetIdTo)) updateMessages[presetIdTo] = {};\n            if (!updateMessages[presetIdTo].hasOwnProperty(CONTROLS_DATA)) updateMessages[presetIdTo][CONTROLS_DATA] = {};\n\n            //\n            // Only copy CONTROLS (for the current version)\n            //\n            //FIXME: copy EXP and FS config\n            CONTROLS_WITH_SEQUENCE.forEach(controlId => {\n                // data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = Object.assign({}, data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]);\n                // ugly / deep copy without shallow references:\n                data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = JSON.parse(JSON.stringify(data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]));\n                updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true);\n            });\n            // Object.assign(data[TARGET_PRESET][presetIdTo], data[TARGET_PRESET][presetIdFrom]);\n\n            //we do not copy the name\n            //updateMessages[presetIdTo][\"name\"] = buildPresetNameSysex(presetIdTo, data);\n\n            // CONTROLS_WITH_SEQUENCE.forEach(controlId => updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true));\n\n            this.setState({data, updateMessages, changed: true});\n        }\n*/\n    };\n\n    render() {\n\n        const presetIndex = this.props.state.currentPresetIndex;\n        const controlId = this.props.state.currentControl;\n        const data = this.props.state.data;\n\n        const showEditor =\n            isVal(presetIndex) &&\n            data &&\n            (TARGET_PRESET in data) &&\n            (presetIndex in data[TARGET_PRESET]) &&\n            (CONTROLS_DATA in data[TARGET_PRESET][presetIndex]) &&\n            (controlId in data[TARGET_PRESET][presetIndex][CONTROLS_DATA]) &&\n            (\"steps\" in data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId]) &&\n            (Object.keys(data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"]).length === 6);\n\n        let presetLabel = \"\";\n        if (data &&\n            (TARGET_PRESET in data) &&\n            (presetIndex in data[TARGET_PRESET]) &&\n            (\"name\" in data[TARGET_PRESET][presetIndex])) {\n            presetLabel = presetIndexToXY(presetIndex) + \": \" + data[TARGET_PRESET][presetIndex][\"name\"];\n        }\n\n        // const showControls = isVal(presetIndex);\n\n        return (\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {this.state.dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <PresetSelectorAndButtons />\n\n                        {data && data[TARGET_PRESET][presetIndex] &&\n                        <div className=\"content-row-content\">\n                            <h2>Preset {presetLabel}</h2>\n                            <PresetNameEditor />\n                        </div>}\n\n                        {data && data[TARGET_PRESET][presetIndex] &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                {/*<h2>Controls for preset {presetLabel}</h2>*/}\n                                {isVal(presetIndex) && <ControlSelector />}\n\n{/*\n                                {data && presetIndex in data[TARGET_PRESET] && Object.keys(data[TARGET_PRESET]).length > 1 &&\n                                <Fragment>\n                                    (experimental) <button onClick={() => this.copyPresetFrom(this.state.copyPresetFrom, presetIndex)}>copy</button> from preset <select value={this.state.copyPresetFrom} onChange={(event) => this.setState({copyPresetFrom: event.target.value})}>\n                                        <option value=\"\">-</option>\n                                    {\n                                        Object.keys(data[TARGET_PRESET]).map((key, index) => {\n                                            if (data[TARGET_PRESET][key]) {\n                                                return (<option key={index} value={key}>{presetIndexToXY(key)} {data[TARGET_PRESET][key].name}</option>);\n                                            } else {\n                                                return null;\n                                            }\n                                        })\n                                    }\n                                    </select> <span className=\"small\">(copy the configuration for the footswitches A..D and 1..6 only)</span>\n                                </Fragment>\n                                }\n*/}\n\n                                {showEditor && <h3>{CONTROLS_FULLNAME[controlId]}:</h3>}\n\n                                {showEditor &&\n                                <ControlModeEditor\n                                    controlId={controlId}\n                                    mode={data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"control_mode\"]}\n                                    onUpdate={(value) => this.updateControlMode(controlId, value)}/>}\n\n                                {showEditor &&\n                                <ControlStepsEditor presetIndex={presetIndex} controlId={controlId} />}\n\n                                {!isVal(presetIndex) && <div className=\"please\">Select a preset.</div>}\n\n                            </Fragment>\n                        </div>}\n\n                        {this.props.state.changed && this.props.state.midi.output !== 0 &&         // FIXME: midiConnected(output) &&\n                        <div className=\"content-row-content\">\n                            {/*<h2>Send the updated config to the Pacer</h2>*/}\n                            <div className=\"actions\">\n                                <button className=\"update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>\n                            </div>\n                        </div>}\n\n                        {/* this.props.debug && this.props.state.changed &&\n                        <div className=\"content-row-content\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <div className=\"dump code\">\n                                </div>\n                            </div>\n                        </div> */}\n\n                        <div className=\"content-row-content\">\n                            <UpdateMessages/>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default inject('state')(observer(Preset));\n","import React, {Component} from 'react';\nimport \"./Monitor.css\";\n\nclass Monitor extends Component {\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"monitor-link\">\n                    Please use the new MIDI monitor available at <a href=\"https://studiocode.dev/midi-monitor/\" target=\"_blank\" rel=\"noopener noreferrer\">https://studiocode.dev/midi-monitor/</a>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n            </div>\n            <div>\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import * as WebMidi from \"webmidi\";\nimport {SYSEX_START} from \"../pacer/sysex\";\n\nexport const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n\nexport const groupPortsByName = () => {\n    let g = {};\n    for (let p of WebMidi.inputs) {\n        g[p.name] = {\n            input: p.id,\n            output: null\n        };\n    }\n    for (let p of WebMidi.outputs) {\n        if (!(p.name in g)) {\n            g[p.name] = {input: null, output: null};\n        }\n        g[p.name].output = p.id\n    }\n    return g;\n};\n\n/**\n *\n * @param port\n * returns true if the midi port is the Pacer\n */\nexport const midiConnected = portId => {\n    return true;\n    //FIXME: return true if at least one output and one input are connected\n\n    // let port = portById(portId);\n    // return port ? port.name.match(new RegExp(PACER_MIDI_PORT_NAME, 'i')) : false\n};\n\n\nexport const batchMessages = (callback, callbackBusy, wait) => {\n\n    // console.log(\"batchMessages: init\", wait);\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n\n        // console.log(\"batchMessages: clear timeout\");\n        clearTimeout(timeout);\n\n        let event = arguments[0];\n\n        //\n        // We ignore all messages that are NOT sysex messages:\n        //\n        if (event.data[0] !== SYSEX_START) {\n            console.log(\"non sysex message ignored\");\n            return;\n        }\n\n        messages.push(event.data);\n\n        callbackBusy(messages.length);  // messages.length is the total number of bytes received so far\n\n        timeout = setTimeout(() => {\n            console.log(\"batchMessages: timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n\n        // console.log(\"batchMessages: done\");\n\n    };\n};\n\n","import React, {Component} from 'react';\nimport * as WebMidi from \"webmidi\";\nimport {portById} from \"../utils/ports\";\nimport {batchMessages} from \"../utils/midi\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport {hs} from \"../utils/hexstring\";\nimport {inject, observer} from \"mobx-react\";\nimport \"./Midi.css\";\n\n\nclass Midi extends Component {\n\n    handleMidiInputEvent = batchMessages(\n\n        messages => {\n            // console.log(\"handleMidiInputEvent\", messages);\n\n            //FIXME: only save in bytes array if we receive a sysex. Ignore all other MIDI messages (CC, NOTE, ...)\n\n            // let numberBytes = 0;\n            // let bin_index = 0;\n            // let buffer = null;\n            // // if (this.props.state.saveBytes) {\n            //     numberBytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            //     buffer = new Uint8Array(numberBytes);\n            //     bin_index = 0;\n            // // }\n\n            let data = this.props.state.data;\n            for (let m of messages) {\n\n                // // if (this.props.state.saveBytes) {\n                //     buffer.set(m, bin_index);\n                //     bin_index += m.length;\n                // // }\n\n                // const p = parseMessage(m);\n                // console.log(\"parsed\", p);\n\n                if (isSysexData(m)) {\n                    data = mergeDeep(data || {}, parseSysexDump(m))\n\n                    this.props.state.storeBytes(m);\n                    // const bi = getBytesIndex(m);\n                    // if (bi) {\n                    //     if (bi.isGlobal) {\n                    //         this.props.state.bytesPresets[bi.presetNum].push(m);\n                    //     } else if (bi.isGlobal) {\n                    //         this.props.state.bytesGlobal.push(m);\n                    //     } else {\n                    //         console.warn(\"getBytesIndex: unsupported message\", m);\n                    //     }\n                    // }\n\n                } else {\n                    console.log(\"MIDI message is not a sysex message\", hs(m))\n                }\n            }\n\n            // // if (this.props.state.saveBytes) {\n            //     if (this.props.state.bytes === null) {\n            //         this.props.state.bytes = buffer;\n            //     } else {\n            //         // merge sysex bytes\n            //         const a = new Uint8Array(this.props.state.bytes.length + buffer.length);\n            //         a.set(this.props.state.bytes);\n            //         a.set(buffer, this.props.state.bytes.length);\n            //         this.props.state.bytes = a;\n            //     }\n            // // }\n\n            console.log(`handleMidiInputEvent: ${messages.length} messages merged`);\n\n            // When requesting a config via MIDI (and not via a file drag&drop), we do not\n            // update the preset and control ID from the MIDI sysex received.\n            // This is important because to get the LED data we need to request the complete\n            // preset data instead of just the selected control's config.\n\n            // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n            // draft.presetIndex = parseInt(pId, 10);\n            // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][CONTROLS_DATA])[0], 10);\n\n            this.props.state.data = data;\n            this.props.state.onBusy({busy: false});\n        },\n        (n) => {\n            //TODO:\n            // console.log(\"handleMidiInputEvent\", n);\n            // console.log(\"batchMessages onBusy\", n);\n            this.props.state.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    connectInput = port => {\n        if (port) {\n            if (port.hasListener(\"sysex\", 'all', this.handleMidiInputEvent)) {\n                console.log(`Midi.connectInput: sysex messages on all channels listener already connected`);\n            } else {\n                console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                port.addListener(\"sysex\", 'all', this.handleMidiInputEvent);\n                console.log(\"connectInput: \", port.name);\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            if (port.removeListener) port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            // pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerInputConnected: false })\n            // }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            console.log(`connectOutput: output ${port.id} connected`);\n        }\n    };\n\n    disconnectOutput = () => {\n        console.log(`disconnectOutput: output disconnected`);\n    };\n\n    autoConnectInput = () => {\n        if (this.props.autoConnect) {\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`);\n            if (!this.props.state.midi.input) {\n                for (let port of this.props.state.midi.inputs) {      //WebMidi.inputs) {\n                    if (port.type === 'input' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n                        this.setState({input: port.id});\n                        this.props.state.midi.input = port.id;\n                        this.connectInput(port);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n        if (this.props.autoConnect) {\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n            if (!this.props.state.midi.output) {\n                for (let port of this.props.state.midi.outputs) {\n                    if (port.type === 'output' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n                        this.props.state.midi.output = port.id;\n                        this.connectOutput(port);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    registerInputs = () => {\n        this.props.state.midi.inputs = WebMidi.inputs.filter(port => port.name.match(new RegExp(this.props.only, 'i')) != null);\n        this.autoConnectInput();\n    };\n\n    registerOutputs = () => {\n        this.props.state.midi.outputs = WebMidi.outputs.filter(port => port.name.match(new RegExp(this.props.only, 'i')) != null);\n        this.autoConnectOutput();\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.props.state.midi.input));\n        this.props.state.midi.input = null;\n        this.props.state.midi.inputs = [];\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.disconnectOutput();\n        this.props.state.midi.output = null;\n        this.props.state.midi.outputs = [];\n    };\n\n    handleMidiConnectEvent = e => {\n        // console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n        // TODO: is disconnect event, remove the existing input listeners\n        if (e.type === \"disconnected\") {\n            this.disconnectInput(e.port.id);\n            this.disconnectOutput();\n        }\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                // console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n            if (e.port.type === 'output') {\n                // console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n        } else {\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n        }\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n        // console.groupEnd();\n    };\n\n    selectInputPort = (event) => {\n        if (this.props.state.midi.input) {\n            this.disconnectInput(portById(this.props.state.midi.input));\n        }\n        const port = portById(event.target.value);\n        if (port) {\n            this.props.state.midi.input = port.id;\n            this.connectInput(port);\n        } else {\n            console.warn(\"selectInputPort: port not found\", event.target.value);\n        }\n    };\n\n    selectOutputPort = (event) => {\n        if (this.props.state.midi.output) {\n            this.disconnectOutput(portById(this.props.state.midi.output));\n        }\n        const port = portById(event.target.value);\n        if (port) {\n            this.props.state.midi.output = port.id;\n            this.connectOutput(port);\n        } else {\n            console.warn(\"selectOutputPort: port not found\", event.target.value);\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            // console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n    render() {\n        return (\n            <div className=\"midi-ports\">\n                <div className=\"midi-port-label\">MIDI input:</div>\n                <select value={this.props.state.midi.input} onChange={this.selectInputPort}>\n                    <option value={0}>- select -</option>\n                    {this.props.state.midi.inputs.map(\n                        (port, index) => <option key={port.id} value={port.id}>{port.name}</option>\n                    )}\n                </select>\n                <div className=\"midi-port-label\">MIDI output:</div>\n                <select value={this.props.state.midi.output} onChange={this.selectOutputPort}>\n                    <option value={0}>- select -</option>\n                    {this.props.state.midi.outputs.map(\n                        (port, index) => <option key={port.id} value={port.id}>{port.name}</option>\n                    )}\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default inject('state')(observer(Midi));\n","import React, {Fragment} from 'react';\nimport Switch from \"react-switch\";\n\nconst PortsGrid = ({ groupedPorts, clickHandler }) => {\n\n    // console.log(\"PortsGrid\", groupedPorts);\n\n    return (\n        <div className=\"ports-grid\">\n            {/*<div className=\"grid-header\">MIDI port</div>*/}\n            {/*<div className=\"grid-header\">IN</div>*/}\n            {/*<div className=\"grid-header\">OUT</div>*/}\n            {Object.keys(groupedPorts).map((name, index) =>\n                <div className=\"port\" key={index}>\n                    <div className=\"port-name\">{name}</div>\n                    {groupedPorts[name].input &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            in&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].input.id)}\n                                checked={groupedPorts[name].input.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].input.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                    {groupedPorts[name].output &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            out&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].output.id)}\n                                checked={groupedPorts[name].output.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].output.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                </div>\n            )}\n        </div>\n    );\n\n};\n\nexport default PortsGrid;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {dropOverlayStyle} from \"../utils/misc\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                            })\n                        );\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n        {\n                // data: null,\n                dropZoneActive: false\n            },\n    () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, dropZoneActive } = this.state;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                Send a dump from your Pacer or<br />drag & drop a patch file here.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <DumpSysex data={data} />\n                        </div>\n\n                    </div>\n\n{/*\n                <div className=\"right-column\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n                </div>\n*/}\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP, TARGET_PRESET\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport {inject, observer} from \"mobx-react\";\nimport {state} from \"../stores/StateStore\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} value={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = observer(({ index, config  }) => {\n\n    // console.log(\"Setting\", index, config.msg_type);\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">message {index}:</div>\n                <div>\n                    <select onChange={(event) => state.updateMidiSettings(index, \"msg_type\", null, event.target.value)} value={config.msg_type}>\n                        {MSG_TYPES_FULLNAME_MIDI_SORTED.map(v => <option key={v.key} value={v.key}>{v.value}</option>)}\n                    </select>\n                </div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </Fragment>\n        );\n    }\n\n    if (!config.data) return null;\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => state.updateMidiSettings(index, \"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => state.updateMidiSettings(index, \"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => state.updateMidiSettings(index, \"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => state.updateMidiSettings(index, \"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => state.updateMidiSettings(index, \"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => state.updateMidiSettings(index, \"msg_type\", null, event.target.value)} value={config.msg_type}>\n                    {MSG_TYPES_FULLNAME_MIDI_SORTED.map(v => <option key={v.key} value={v.key}>{v.value}</option>)}\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => state.updateMidiSettings(index, \"channel\", null, event.target.value)} value={config.channel}>\n                    {Array.from(Array(17).keys()).map(i => <option key={i} value={i}>{i === 0 ? 'global' : i}</option>)}\n                </select>\n            </div>\n        </Fragment>\n    );\n});\n\nclass MidiSettingsEditor extends Component {\n\n    render() {\n\n        const settings = this.props.state.data[TARGET_PRESET][this.props.state.currentPresetIndex][\"midi\"]\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(MidiSettingsEditor));\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {dropOverlayStyle} from \"../utils/misc\";\nimport UpdateMessages from \"../components/UpdateMessages\";\nimport {inject, observer} from \"mobx-react\";\nimport {PresetSelectorAndButtons} from \"../components/PresetSelectorAndButtons\";\nimport \"./Preset.css\";\n\nclass PresetMidi extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            {dropZoneActive: false},\n            () => { this.props.state.readFiles(files) }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    render() {\n\n        const presetIndex = this.props.state.currentPresetIndex;\n        const data = this.props.state.data;\n\n        let showEditor = false;\n        if (this.props.state.data) {\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (\"midi\" in data[TARGET_PRESET][presetIndex]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16)\n        }\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {this.state.dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <PresetSelectorAndButtons />\n\n                        {showEditor &&\n                        <div className=\"content-row-content\">\n                            <h2>Preset MIDI settings</h2>\n                            <MidiSettingsEditor />\n                        </div>}\n\n                        {this.props.state.changed && this.props.state.midi.output !== 0 &&         // FIXME: midiConnected(output) &&\n                        <div className=\"content-row-content\">\n                            <h2>Send the updated config to the Pacer</h2>\n                            <div className=\"actions\">\n                                <button className=\"update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>\n                            </div>\n                        </div>}\n\n                        <div className=\"content-row-content\">\n                            <UpdateMessages/>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default inject('state')(observer(PresetMidi));\n","import React, {Fragment} from \"react\";\nimport {\n    TARGET_PRESET,\n    STOMPSWITCHES_TOP,\n    STOMPSWITCHES_BOTTOM,\n    FOOTSWITCHES,\n    EXPPEDALS,\n    CONTROLS,\n    MSG_TYPES_DATA_HELP,\n    NOT_USED,\n    MSG_SW_NOTE,\n    COLORS,\n    COLORS_HTML, MSG_CTRL_OFF, CONTROL_MODES\n} from \"../pacer/constants\";\nimport {MessageSummary, presetIndexToXY} from \"../pacer/utils\";\nimport {STEPS_DATA} from \"../pacer/sysex\";\nimport {h} from \"../utils/hexstring\";\nimport * as Note from \"tonal-note\";\nimport {observer} from \"mobx-react\";\nimport {withRouter} from \"react-router-dom\";\nimport {state} from \"../stores/StateStore\";\n\n\nfunction hasMidiConfig(preset) {\n    if (preset && preset[\"midi\"]) {\n        for (let prop in preset.midi) {\n            const m = preset.midi[prop];\n            if (m.hasOwnProperty(\"msg_type\")) {\n                if (m.msg_type !== MSG_CTRL_OFF) return true;\n            }\n        }\n    }\n    return false;\n}\n\nconst Message = observer(({ message, hexDisplay }) => {\n\n    if (message === null || message === undefined || (message.constructor === Object && Object.keys(message).length === 0)) return null;\n\n    const t = message[\"msg_type\"];\n\n    // console.log(\"Message type\", t, message, message[\"msg_type\"], message.msg_type, JSON.stringify(message), typeof message, Object.keys(message));\n\n    const used = MSG_TYPES_DATA_HELP[t];\n    const data = message[\"data\"];\n\n    let d = [null, null, null];\n    for (let i=0; i<3; i++) {\n        if (used[i] === NOT_USED) continue;\n        d[i] = hexDisplay ? h(data[i]) : data[i];\n        if (i === 0 && t === MSG_SW_NOTE) {\n            d[i] += ' (' + Note.fromMidi(data[i], true) + ')';\n        }\n    }\n\n    let channel = '';\n    if (hexDisplay) {\n        channel = h(message[\"channel\"]);\n    } else {\n        channel = message[\"channel\"] === 0 ? 'global ch.' : `ch. ${message[\"channel\"]}`;\n    }\n\n    let colorOn = null;\n    let colorOff = null;\n    if (message[\"led_active_color\"] && message[\"led_inactive_color\"]) {\n        colorOn = message[\"led_active_color\"] === 127 ? 0x00 : message[\"led_active_color\"];\n        colorOff = message[\"led_inactive_color\"] === 127 ? 0x00 : message[\"led_inactive_color\"];\n    }\n    const displayColor = colorOn > 0 && colorOff > 0;\n\n    // console.log(message[\"led_active_color\"], message[\"led_inactive_color\"], colorOn, colorOff);\n\n    return (\n        <Fragment>\n            <div className=\"overview-message\">\n                <div className=\"overview-message-type\">{MessageSummary(message)}</div>\n            </div>\n            {message[\"msg_type\"] !== MSG_CTRL_OFF &&\n            <div className=\"overview-message-ch-colors\">\n                <div className=\"msg-midi-channel\">{channel}</div>\n                {displayColor &&\n                <div className=\"overview-step-color\">\n                    <div className=\"color-on\" style={{backgroundColor: COLORS_HTML[colorOn]}} title={COLORS[colorOn]}></div>\n                    <div className=\"color-off\" style={{backgroundColor: COLORS_HTML[colorOff]}} title={COLORS[colorOff]}></div>\n                </div>}\n            </div>}\n        </Fragment>\n    );\n});\n\nconst Step = observer(({ step, hexDisplay }) => {\n    if (step === null || step === undefined) return null;\n    if (step[\"active\"] === 0) return null;\n    return (\n        <div className=\"overview-step\">\n            <Message message={step} hexDisplay={hexDisplay} />\n        </div>\n    );\n});\n\nconst Control = withRouter(observer(({ history, presetIndex, controlIndex, control, hexDisplay, stompswitch=true } = {}) => {\n\n    const gotoPreset = () => {\n        state.selectPreset(presetIndex);\n        state.selectControl(controlIndex);\n        history.push('/preset');\n    }\n\n    if (control === null || control === undefined) return null;\n\n    if (!control[STEPS_DATA]) return null;\n\n    const n_active_steps = Object.keys(control[STEPS_DATA]).filter(n => control[STEPS_DATA][n][\"active\"]>0).length;\n\n    return (\n        <div className={`overview-control ${stompswitch?'stompswitch':''}`} onClick={gotoPreset} title=\"click to edit\">\n            <div className=\"control-header\">\n                <div className=\"control-name\">{CONTROLS[controlIndex]}</div>\n                {/*<div className=\"control-name\"><Link to=\"/preset\">{CONTROLS[id]}</Link></div>*/}\n                {n_active_steps > 1 && <div>{CONTROL_MODES[control[\"control_mode\"]]}</div>}\n            </div>\n            {Object.keys(control[STEPS_DATA]).map(n => <Step key={n} step={control[STEPS_DATA][n]} hexDisplay={hexDisplay} />)}\n        </div>\n    );\n\n}));\n\nconst Controls = observer(({ presetIndex, controls, hexDisplay, extControls }) => {\n    if (controls === null || controls === undefined) return null;\n    // console.log(\"Controls\", presetIndex, typeof presetIndex);\n    const props = {presetIndex, hexDisplay};\n    return (\n        <div className=\"overview-controls\">\n            {extControls && FOOTSWITCHES.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} stompswitch={false} />)}\n            {extControls && EXPPEDALS.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} stompswitch={false} />)}\n            <div></div>\n            {STOMPSWITCHES_TOP.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} />)}\n            <div></div>\n            {STOMPSWITCHES_BOTTOM.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} />)}\n        </div>\n    );\n});\n\nconst MidiSetting = observer(({ setting, hexDisplay }) => {\n    if (setting === null || setting === undefined) return null;\n    if (!setting[\"msg_type\"]) return null;\n    if (setting.msg_type === MSG_CTRL_OFF) return null;\n    return (\n        <div className=\"overview-midi\">\n            <Message message={setting} hexDisplay={hexDisplay} />\n        </div>\n    );\n});\n\nconst MidiSettings = observer(({ settings, hexDisplay }) => {\n    // console.log(\"MidiSettings\", settings);\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"overview-midi-settings\">\n            <div className=\"control-name\">MIDI</div>\n            {Object.keys(settings).map(i =>                     // TODO: .filter(msg_type !== MSG_CTRL_OFF)\n                <MidiSetting key={i} index={i} setting={settings[i]} hexDisplay={hexDisplay} />\n            )}\n        </div>\n    );\n});\n\n\nconst PresetTitle = withRouter(observer(({ history, presetIndex, presetName} = {}) => {\n\n    const gotoPreset = () => {\n        state.selectPreset(presetIndex);\n        state.selectControl(1);\n        history.push('/preset');\n    }\n\n    return (\n        <h3 onClick={gotoPreset} title=\"click to edit\">{presetIndexToXY(parseInt(presetIndex, 10))}: <span className=\"bold\">{presetName}</span></h3>\n    );\n\n}));\n\nconst Preset = observer(({ index, data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    // console.log(\"Preset\", index, typeof index);\n    return (\n        <div className=\"overview-preset\">\n            <PresetTitle presetIndex={index} presetName={data[\"name\"]} />\n            {/*<h3>{presetIndexToXY(parseInt(index, 10))}: <span className=\"bold\">{data[\"name\"]}</span></h3>*/}\n            <Controls presetIndex={index} controls={data[\"controls\"]} hexDisplay={hexDisplay} extControls={extControls} />\n            {hasMidiConfig(data) && <MidiSettings settings={data[\"midi\"]} hexDisplay={hexDisplay} />}\n        </div>\n    );\n});\n\nconst Presets = observer(({ presets, hexDisplay, extControls }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div className=\"overview-presets\">\n            {Object.keys(presets).map(presetIndex => <Preset key={presetIndex} index={presetIndex} data={presets[presetIndex]} hexDisplay={hexDisplay} extControls={extControls} />)}\n        </div>\n    );\n});\n\nconst PresetOverview = observer(({ data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    // console.log(\"PresetOverview render\");\n    return (\n        <div className=\"overview\">\n            <Presets presets={data[TARGET_PRESET]} hexDisplay={hexDisplay} extControls={extControls} />\n        </div>\n    );\n});\n\nexport default PresetOverview;\n","import React, {Component} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport Dropzone from \"react-dropzone\";\nimport {dropOverlayStyle} from \"../utils/misc\";\nimport {PresetSelectorAndButtons} from \"../components/PresetSelectorAndButtons\";\nimport PresetOverview from \"../components/PresetOverview\";\nimport \"./Overview.css\";\n\nclass Overview extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            { dropZoneActive: false },\n            () => {this.props.state.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    render() {\n\n        console.log(\"overview render\");\n\n        return (\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {this.state.dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <PresetSelectorAndButtons />\n\n                        <div className=\"content-row-content\">\n                            <PresetOverview data={this.props.state.data} hexDisplay={!this.props.state.decBase} extControls={this.props.state.extControls} />\n                        </div>\n\n                    </div>\n\n                </div>\n\n\n                    {/* this.props.state.bytesPresets.map((p, i) =>\n                        <div>\n                            {i}\n                            {p.map(b => <pre>{toHexDump(b).map(s => s+'\\n')}</pre>)}\n                        </div>\n                    ) */}\n\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default inject('state')(observer(Overview));\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\n\nclass BusyIndicator extends Component {\n\n    render() {\n\n        const { busy, busyMessage, progress } = this.props.state;\n        return busy ?\n            <div className={this.props.className || 'busy'}>\n                {this.props.busyMessage ? this.props.busyMessage : busyMessage}\n                {progress >= 0 && <span> {progress}%</span>}\n            </div>\n            : null;\n    }\n\n}\n\nexport default inject('state')(observer(BusyIndicator));\n\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\n\nclass Download extends Component {\n\n    handleClick = (event) => {\n\n        const d = typeof this.props.data === 'function' ? this.props.data() : this.props.data;\n        let url = window.URL.createObjectURL(new Blob([d], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".syx\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        if (this.props.disabled) {\n            return (\n                <button disabled={true} className={`action-button ${this.props.className}`}>{this.props.label}</button>\n            );\n        } else {\n            return (\n                <button onClick={this.handleClick} className={`action-button ${this.props.className}`}>{this.props.label}</button>\n            );\n        }\n    }\n\n}\n\nexport default inject('state')(observer(Download));\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport Download from \"./Download\";\n\nclass DownloadAllPresets extends Component {\n\n    render() {\n        // console.log(\"DownloadAllPresets render\");\n        if (this.props.state.isBytesPresetEmpty()) return null;\n        return (\n            <Download data={() => this.props.state.getBytesPresetsAsBlob()} filename={`pacer-patch`} addTimestamp={true} label=\"Save to file\" />\n        );\n    }\n\n}\n\nexport default inject('state')(observer(DownloadAllPresets));\n","import React, {Component} from 'react';\nimport {TARGET_PRESET} from \"../pacer/constants\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport Dropzone from \"react-dropzone\";\nimport {midiConnected} from \"../utils/midi\";\nimport {dropOverlayStyle} from \"../utils/misc\";\nimport {inject, observer} from \"mobx-react\";\nimport BusyIndicator from \"../components/BusyIndicator\";\nimport DownloadAllPresets from \"../components/DownloadAllPresets\";\nimport \"./Patch.css\";\n\nclass Patch extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            dropZoneActive: false,\n            status: null\n        };\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        this.props.state.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click();\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                dropZoneActive: false\n            },\n            () => {\n                //TODO\n                this.props.state.readFiles(files);\n            }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    sendDump = () => {\n        this.props.state.sendDump();\n    }\n\n    render() {\n\n        // console.log(\"patch render\");\n\n        const { status, dropZoneActive } = this.state;\n        const output = this.props.state.midi.output;\n        const data = this.props.state.data;\n\n        // const q =  QueryString.parse(window.location.search);\n        // const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <div className=\"content-row-content first dump-wrapper\">\n\n                            <h2>Import/Export all presets at once</h2>\n\n                            <div className=\"\">\n                                <p>\n                                    This page allows you to import/export all the Pacer presets at once.\n                                </p>\n                                <p>\n                                    Please note that, due to a limitation with the current Pacer firmware, the preset D6 cannot be read by this application. A future firmware update should fix this.\n                                </p>\n                                <p>\n                                    The Global Config is not read or written by this tool. A future update may offer this possibility.\n                                </p>\n                            </div>\n\n                            <div>\n                                <h3>Pacer &#x279C; file :</h3>\n                                {midiConnected(output) && <button className=\"action-button read\" onClick={() => this.props.state.readFullDump()}>Read Pacer</button>}\n                                <DownloadAllPresets />\n                                {/*{!this.props.state.isBytesPresetEmpty() && <Download data={this.props.state.getBytesPresetsAsBlob} filename={`pacer-patch`} addTimestamp={true} label=\"Save to file\" />}*/}\n                                {/*{this.props.state.bytes && <Download disabled={!this.props.state.bytes} data={this.props.state.bytes} filename={`pacer-patch`} addTimestamp={true} label=\"Save to file\" className=\"space-left\" />}*/}\n                                <BusyIndicator className=\"space-left inline-busy\" busyMessage={\"reading pacer:\"} />\n                            </div>\n                            <div>\n                                <h3>file &#x279C; Pacer :</h3>\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                                <button className=\"action-button\" onClick={this.onInputFile}>Load sysex file</button>\n                                {data && midiConnected(output) && <button className=\"action-button update\" onClick={this.sendDump}>Send to Pacer</button>}\n                                {/*<button disabled={!(data && midiConnected(output))} onClick={() => this.props.state.sendDump()} className=\"space-left\">Send to Pacer</button>*/}\n                                {this.props.state.sendProgress && <span>{this.props.state.sendProgress}</span>}\n                            </div>\n\n                            <div>\n                                <h3>Data included in the dump:</h3>\n                                <p>\n                                    Presets marked \"no data\" are ignored and will not be sent to your Pacer or included in the sysex file.\n                                </p>\n                            </div>\n\n                            <div className=\"patch-content\">\n                            {\n                                Array.from(Array(24+1).keys()).map(\n                                index => {\n                                    let id = presetIndexToXY(index);\n                                    let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                    let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                                    if (index === 0) return null;\n\n                                    return (\n                                        <div key={index}>\n                                            {/*<div className=\"right-align\">{index}</div>*/}\n                                            <div>{id}</div>\n                                            {show ? <div>{name}</div> : <div className=\"placeholder\">no data</div>}\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>\n\n                            {status &&\n                            <div className={`status ${status.severity}`}>\n                                {status.message}\n                            </div>\n                            }\n\n                            {data && <div className=\"Xpreset-buttons\">\n                                <button onClick={() => this.props.state.clear()}>CLEAR DATA</button>\n                            </div>}\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n{/*\n                <div>\n                    bytes: {this.props.state.bytes ? this.props.state.bytes.length : '-1'}\n                    <pre>{toHexDump(this.props.state.bytes).map(s => s+'\\n')}</pre>\n                </div>\n*/}\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default inject('state')(observer(Patch));\n","import React, {Component} from 'react';\nimport \"./MidiSupportWarning.css\";\n\nexport class MidiSupportWarning extends Component {\n\n    state = {\n        supported: true\n    };\n\n    componentDidMount() {\n        if (navigator.requestMIDIAccess) {\n            console.log(`MidiSupportWarning: midi supported`);\n        } else {\n            console.log(`MidiSupportWarning: midi not supported`);\n            this.setState({supported: false});\n        }\n    }\n    render() {\n\n        if (this.state.supported) return null;\n\n        return (\n            <div className=\"midi-support-warning-top\">\n                This browser does not support MIDI.\n                See <a href=\"https://webmidi.info/\" target=\"_blank\" rel=\"noreferrer noopener\">webmidi.info</a> for a list of browsers that support MIDI.\n            </div>\n        );\n\n/*\n        return (\n            <div className=\"midi-support-warning-fs\">\n                <div>\n                    <div className=\"warning-message-fs\">\n                        <h1>This browser does not support MIDI.</h1>\n                        <p>Currently the browsers that support MIDI are:</p>\n                        <ul>\n                            <li>Google Chrome version 54 and above</li>\n                            <li>Opera version 42 and above</li>\n                            <li>Microsoft Edge (Chromium version) version 80 and above</li>\n                        </ul>\n                        <p>You can check if a browser supports WebMIDI by going to <a href=\"https://webmidi.info/\" target=\"_blank\" rel=\"noreferrer noopener\">webmidi.info</a></p>\n                    </div>\n                </div>\n            </div>\n        );\n*/\n    }\n\n}\n","import React, {Component} from 'react';\nimport {Provider} from \"mobx-react\";\nimport {state as globalState} from \"./stores/StateStore\";\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Debug from \"./pages/Debug\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport PresetMidi from \"./pages/PresetMidi\";\nimport Overview from \"./pages/Overview\";\nimport Midi from \"./components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"./pacer/constants\";\nimport BusyIndicator from \"./components/BusyIndicator\";\nimport * as QueryString from \"query-string\";\nimport Patch from \"./pages/Patch\";\nimport './App.css';\nimport {MidiSupportWarning} from \"./components/MidiSupportWarning\";\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <div className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </div>\n        )}\n    />\n);\n\nconst NoMatch = () =>\n    <div className=\"content home\">\n        <div className=\"error\">\n            Invalid URL\n        </div>\n    </div>;\n\n\nclass App extends Component {\n\n    render() {\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n            <Provider state={globalState}>\n                <Router>\n                    <div className=\"app\">\n\n                        <MidiSupportWarning />\n\n                        <header className=\"header\">\n                            <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Overview\" />\n                            <MenuLink to=\"/preset\"          label=\"Preset Controls\" />\n                            <MenuLink to=\"/presetmidi\"      label=\"Preset MIDI\" />\n                            {/*<MenuLink to=\"/global\"          label=\"Global\" />*/}\n                            <MenuLink to=\"/patch\"           label=\"Import/Export\" />\n                            <MenuLink to=\"/monitor\"         label=\"Monitor\" />\n                            {debug && <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />}\n                            {debug && <MenuLink to=\"/debug\" label=\"Debug\" />}\n                            <MenuLink to=\"/help\"            label=\"Help\" />\n                            <div className=\"spacer\"> </div>\n                            <div className=\"header-app-name\">\n                                Pacer editor {process.env.REACT_APP_VERSION} by <a href=\"https://studiocode.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">StudioCode.dev</a>\n                            </div>\n                        </header>\n\n                        <div className=\"subheader row\">\n                            <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME} />\n                            <BusyIndicator />\n                        </div>\n\n                        <div className=\"main-content-wrapper\">\n                        <Switch>\n                            <Route exact={true} path=\"/\" render={props => <Overview debug={debug}/>} />\n                            <Route path=\"/preset\"        render={props => <Preset debug={debug}/>} />\n                            <Route path=\"/presetmidi\"    render={props => <PresetMidi debug={debug} />} />\n                            {/*<Route path=\"/global\"        render={props => <Global debug={debug} />} />*/}\n                            <Route path=\"/patch\"         render={props => <Patch debug={debug} />} />\n                            <Route path=\"/monitor\"       render={props => <Monitor debug={debug}/>} />\n                            {debug && <Route path=\"/dumpdecoder\" render={props => <DumpDecoder debug={debug}/>} />}\n                            {debug && <Route path=\"/debug\"       render={props => <Debug debug={debug} />} />}\n                            <Route exact={true} path=\"/help\"     render={props => <Home />} />\n                            <Route component={NoMatch} />\n                        </Switch>\n\n                        {/*<Instructions />*/}\n\n                        {/*<Debug />*/}\n\n                        </div>\n\n                        <Footer />\n\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}